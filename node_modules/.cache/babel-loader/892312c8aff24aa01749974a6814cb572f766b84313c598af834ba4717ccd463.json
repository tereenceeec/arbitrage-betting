{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teren\\\\Documents\\\\GitHub\\\\arbitrage-betting\\\\src\\\\pages\\\\h2hSpreadTotal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchH2HOdds, fetchSpreadOdds, fetchTotalOdds } from '../api';\nimport { renderArbitrageBets } from '../components/functions/renderArbitrageBets';\nimport { renderOdds } from '../components/functions/renderOdds';\nimport { Box, Heading, Divider, Flex } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst H2hSpreadTotal = () => {\n  _s();\n  const [h2hOdds, setH2HOdds] = useState([]);\n  const [spreadOdds, setSpreadOdds] = useState([]);\n  const [totalOdds, setTotalOdds] = useState([]);\n  useEffect(() => {\n    const getOdds = async () => {\n      try {\n        const h2hData = await fetchH2HOdds();\n        const spreadData = await fetchSpreadOdds();\n        const totalData = await fetchTotalOdds();\n        setH2HOdds(h2hData);\n        setSpreadOdds(spreadData);\n        setTotalOdds(totalData);\n      } catch (error) {\n        console.error('Failed to fetch odds:', error);\n      }\n    };\n    getOdds();\n  }, []);\n  const h2hArbs = renderArbitrageBets(h2hOdds, 'h2h');\n  const spreadArbs = renderArbitrageBets(spreadOdds, 'spreads');\n  const totalArbs = renderArbitrageBets(totalOdds, 'totals');\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    gap: 6,\n    justify: \"space-between\",\n    w: \"100%\",\n    children: [{\n      label: 'H2H',\n      arbs: h2hArbs,\n      odds: h2hOdds,\n      key: 'h2h'\n    }, {\n      label: 'Spread',\n      arbs: spreadArbs,\n      odds: spreadOdds,\n      key: 'spreads'\n    }, {\n      label: 'Total',\n      arbs: totalArbs,\n      odds: totalOdds,\n      key: 'totals'\n    }].map(({\n      label,\n      arbs,\n      odds,\n      key\n    }) => /*#__PURE__*/_jsxDEV(Box, {\n      w: \"33%\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h2\",\n        size: \"md\",\n        mb: 3,\n        color: \"teal.800\",\n        children: [label, \" Arbitrage\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        direction: \"column\",\n        gap: 4,\n        mb: 6,\n        children: arbs.length ? arbs.map((arb, index) => /*#__PURE__*/_jsxDEV(Box, {\n          p: 2,\n          children: arb\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(Box, {\n          p: 4,\n          textAlign: \"center\",\n          border: \"1px dashed\",\n          borderColor: \"gray.300\",\n          borderRadius: \"md\",\n          color: \"gray.500\",\n          children: \"No arbitrage found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        borderColor: \"teal.300\",\n        mb: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h2\",\n        size: \"md\",\n        mb: 3,\n        color: \"teal.800\",\n        children: [label, \" Odds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        direction: \"column\",\n        gap: 4,\n        children: renderOdds(odds, key)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(H2hSpreadTotal, \"Yx59K1I1dKtOOn6Q+0ZEuOW8Gfk=\");\n_c = H2hSpreadTotal;\nexport default H2hSpreadTotal;\nvar _c;\n$RefreshReg$(_c, \"H2hSpreadTotal\");","map":{"version":3,"names":["React","useEffect","useState","fetchH2HOdds","fetchSpreadOdds","fetchTotalOdds","renderArbitrageBets","renderOdds","Box","Heading","Divider","Flex","jsxDEV","_jsxDEV","H2hSpreadTotal","_s","h2hOdds","setH2HOdds","spreadOdds","setSpreadOdds","totalOdds","setTotalOdds","getOdds","h2hData","spreadData","totalData","error","console","h2hArbs","spreadArbs","totalArbs","gap","justify","w","children","label","arbs","odds","key","map","as","size","mb","color","fileName","_jsxFileName","lineNumber","columnNumber","direction","length","arb","index","p","textAlign","border","borderColor","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/Teren/Documents/GitHub/arbitrage-betting/src/pages/h2hSpreadTotal.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { fetchH2HOdds, fetchSpreadOdds, fetchTotalOdds } from '../api';\r\nimport { renderArbitrageBets, Game } from '../components/functions/renderArbitrageBets';\r\nimport { renderOdds } from '../components/functions/renderOdds';\r\nimport { Box, Heading, Divider, Flex } from '@chakra-ui/react';\r\n\r\nconst H2hSpreadTotal = () => {\r\n  const [h2hOdds, setH2HOdds] = useState<Game[]>([]);\r\n  const [spreadOdds, setSpreadOdds] = useState<Game[]>([]);\r\n  const [totalOdds, setTotalOdds] = useState<Game[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getOdds = async () => {\r\n      try {\r\n        const h2hData = await fetchH2HOdds();\r\n        const spreadData = await fetchSpreadOdds();\r\n        const totalData = await fetchTotalOdds();\r\n\r\n        setH2HOdds(h2hData);\r\n        setSpreadOdds(spreadData);\r\n        setTotalOdds(totalData);\r\n      } catch (error) {\r\n        console.error('Failed to fetch odds:', error);\r\n      }\r\n    };\r\n\r\n    getOdds();\r\n  }, []);\r\n\r\n  const h2hArbs = renderArbitrageBets(h2hOdds, 'h2h');\r\n  const spreadArbs = renderArbitrageBets(spreadOdds, 'spreads');\r\n  const totalArbs = renderArbitrageBets(totalOdds, 'totals');\r\n\r\n  return (\r\n    <Flex gap={6} justify=\"space-between\" w=\"100%\">\r\n      {/* Section Template */}\r\n      {[\r\n        { label: 'H2H', arbs: h2hArbs, odds: h2hOdds, key: 'h2h' },\r\n        { label: 'Spread', arbs: spreadArbs, odds: spreadOdds, key: 'spreads' },\r\n        { label: 'Total', arbs: totalArbs, odds: totalOdds, key: 'totals' },\r\n      ].map(({ label, arbs, odds, key }) => (\r\n        <Box key={key} w=\"33%\">\r\n          <Heading as=\"h2\" size=\"md\" mb={3} color=\"teal.800\">\r\n            {label} Arbitrage\r\n          </Heading>\r\n          <Flex direction=\"column\" gap={4} mb={6}>\r\n            {arbs.length ? (\r\n              arbs.map((arb, index) => (\r\n                <Box\r\n                  key={index}\r\n                  p={2}\r\n                >\r\n                  {arb}\r\n                </Box>\r\n              ))\r\n            ) : (\r\n              <Box\r\n                p={4}\r\n                textAlign=\"center\"\r\n                border=\"1px dashed\"\r\n                borderColor=\"gray.300\"\r\n                borderRadius=\"md\"\r\n                color=\"gray.500\"\r\n              >\r\n                No arbitrage found.\r\n              </Box>\r\n            )}\r\n          </Flex>\r\n\r\n          <Divider borderColor=\"teal.300\" mb={4} />\r\n\r\n          <Heading as=\"h2\" size=\"md\" mb={3} color=\"teal.800\">\r\n            {label} Odds\r\n          </Heading>\r\n          <Flex direction=\"column\" gap={4}>\r\n            {renderOdds(odds, key)}\r\n          </Flex>\r\n        </Box>\r\n      ))}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default H2hSpreadTotal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}