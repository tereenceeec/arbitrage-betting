{"ast":null,"code":"import { compact, isEqual, chunk, prevIndex, nextIndex, isObject, hasProp } from '@zag-js/utils';\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar fallback = {\n  itemToValue(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"value\")) return item.value;\n    return \"\";\n  },\n  itemToString(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"label\")) return item.label;\n    return fallback.itemToValue(item);\n  },\n  isItemDisabled(item) {\n    if (isObject(item) && hasProp(item, \"disabled\")) return !!item.disabled;\n    return false;\n  }\n};\nvar ListCollection = class _ListCollection {\n  constructor(options) {\n    this.options = options;\n    /**\n     * The items in the collection\n     */\n    __publicField(this, \"items\");\n    __publicField(this, \"copy\", items => {\n      return new _ListCollection({\n        ...this.options,\n        items: items ?? [...this.items]\n      });\n    });\n    __publicField(this, \"isEqual\", other => {\n      return isEqual(this.items, other.items);\n    });\n    /**\n     * Function to update the collection items\n     */\n    __publicField(this, \"setItems\", items => {\n      return this.copy(items);\n    });\n    /**\n     * Returns all the values in the collection\n     */\n    __publicField(this, \"getValues\", (items = this.items) => {\n      return Array.from(items).map(item => this.getItemValue(item)).filter(Boolean);\n    });\n    /**\n     * Get the item based on its value\n     */\n    __publicField(this, \"find\", value => {\n      if (value == null) return null;\n      const index = this.items.findIndex(item => this.getItemValue(item) === value);\n      return index != null ? this.items[index] : null;\n    });\n    /**\n     * Get the items based on its values\n     */\n    __publicField(this, \"findMany\", values => {\n      return Array.from(values).map(value => this.find(value)).filter(item => item != null);\n    });\n    /**\n     * Get the item based on its index\n     */\n    __publicField(this, \"at\", index => {\n      return this.items[index] ?? null;\n    });\n    __publicField(this, \"sortFn\", (valueA, valueB) => {\n      const indexA = this.indexOf(valueA);\n      const indexB = this.indexOf(valueB);\n      return (indexA ?? 0) - (indexB ?? 0);\n    });\n    /**\n     * Sort the values based on their index\n     */\n    __publicField(this, \"sort\", values => {\n      return [...values].sort(this.sortFn.bind(this));\n    });\n    /**\n     * Convert an item to a value\n     */\n    __publicField(this, \"getItemValue\", item => {\n      if (item == null) return null;\n      return this.options.itemToValue?.(item) ?? fallback.itemToValue(item);\n    });\n    /**\n     * Whether an item is disabled\n     */\n    __publicField(this, \"getItemDisabled\", item => {\n      if (item == null) return false;\n      return this.options.isItemDisabled?.(item) ?? fallback.isItemDisabled(item);\n    });\n    /**\n     * Convert an item to a string\n     */\n    __publicField(this, \"stringifyItem\", item => {\n      if (item == null) return null;\n      return this.options.itemToString?.(item) ?? fallback.itemToString(item);\n    });\n    /**\n     * Convert a value to a string\n     */\n    __publicField(this, \"stringify\", value => {\n      if (value == null) return null;\n      return this.stringifyItem(this.find(value));\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyItems\", (items, separator = \", \") => {\n      return Array.from(items).map(item => this.stringifyItem(item)).filter(Boolean).join(separator);\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyMany\", (value, separator) => {\n      return this.stringifyItems(this.findMany(value), separator);\n    });\n    /**\n     * Whether the collection has a value\n     */\n    __publicField(this, \"has\", value => {\n      return this.indexOf(value) !== -1;\n    });\n    /**\n     * Whether the collection has an item\n     */\n    __publicField(this, \"hasItem\", item => {\n      if (item == null) return false;\n      return this.has(this.getItemValue(item));\n    });\n    /**\n     * Returns the next value in the collection\n     */\n    __publicField(this, \"getNextValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.min(index + step, this.size - 1) : index + step;\n      while (index <= this.size && this.getItemDisabled(this.at(index))) index++;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Returns the previous value in the collection\n     */\n    __publicField(this, \"getPreviousValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.max(index - step, 0) : index - step;\n      while (index >= 0 && this.getItemDisabled(this.at(index))) index--;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Get the index of an item based on its key\n     */\n    __publicField(this, \"indexOf\", value => {\n      if (value == null) return -1;\n      return this.items.findIndex(item => this.getItemValue(item) === value);\n    });\n    __publicField(this, \"getByText\", (text, current) => {\n      let items = current != null ? wrap(this.items, this.indexOf(current)) : this.items;\n      const isSingleKey = text.length === 1;\n      if (isSingleKey) items = items.filter(item => this.getItemValue(item) !== current);\n      return items.find(item => match(this.stringifyItem(item), text));\n    });\n    /**\n     * Search for a value based on a query\n     */\n    __publicField(this, \"search\", (queryString, options) => {\n      const {\n        state,\n        currentValue,\n        timeout = 350\n      } = options;\n      const search = state.keysSoFar + queryString;\n      const isRepeated = search.length > 1 && Array.from(search).every(char => char === search[0]);\n      const query = isRepeated ? search[0] : search;\n      const item = this.getByText(query, currentValue);\n      const value = this.getItemValue(item);\n      function cleanup() {\n        clearTimeout(state.timer);\n        state.timer = -1;\n      }\n      function update(value2) {\n        state.keysSoFar = value2;\n        cleanup();\n        if (value2 !== \"\") {\n          state.timer = +setTimeout(() => {\n            update(\"\");\n            cleanup();\n          }, timeout);\n        }\n      }\n      update(search);\n      return value;\n    });\n    __publicField(this, \"update\", (value, item) => {\n      let index = this.items.findIndex(item2 => this.getItemValue(item2) === value);\n      if (index === -1) return this;\n      return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);\n    });\n    __publicField(this, \"insert\", (index, ...items) => {\n      return this.copy(insert(this.items, index, ...items));\n    });\n    __publicField(this, \"insertBefore\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;else return this;\n      }\n      return this.copy(insert(this.items, toIndex, ...items));\n    });\n    __publicField(this, \"insertAfter\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;else return this;\n      }\n      return this.copy(insert(this.items, toIndex + 1, ...items));\n    });\n    __publicField(this, \"prepend\", (...items) => {\n      return this.copy(insert(this.items, 0, ...items));\n    });\n    __publicField(this, \"append\", (...items) => {\n      return this.copy(insert(this.items, this.items.length, ...items));\n    });\n    __publicField(this, \"remove\", (...itemsOrValues) => {\n      const values = itemsOrValues.map(itemOrValue => typeof itemOrValue === \"string\" ? itemOrValue : this.getItemValue(itemOrValue));\n      return this.copy(this.items.filter(item => {\n        const value = this.getItemValue(item);\n        if (value == null) return false;\n        return !values.includes(value);\n      }));\n    });\n    __publicField(this, \"move\", (value, toIndex) => {\n      const fromIndex = this.indexOf(value);\n      if (fromIndex === -1) return this;\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    __publicField(this, \"reorder\", (fromIndex, toIndex) => {\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    __publicField(this, \"compareValue\", (a, b) => {\n      const indexA = this.indexOf(a);\n      const indexB = this.indexOf(b);\n      if (indexA < indexB) return -1;\n      if (indexA > indexB) return 1;\n      return 0;\n    });\n    __publicField(this, \"range\", (from, to) => {\n      let keys = [];\n      let key = from;\n      while (key != null) {\n        let item = this.find(key);\n        if (item) keys.push(key);\n        if (key === to) return keys;\n        key = this.getNextValue(key);\n      }\n      return [];\n    });\n    __publicField(this, \"getValueRange\", (from, to) => {\n      if (from && to) {\n        if (this.compareValue(from, to) <= 0) {\n          return this.range(from, to);\n        }\n        return this.range(to, from);\n      }\n      return [];\n    });\n    __publicField(this, \"toString\", () => {\n      let result = \"\";\n      for (const item of this.items) {\n        const value = this.getItemValue(item);\n        const label = this.stringifyItem(item);\n        const disabled = this.getItemDisabled(item);\n        const itemString = [value, label, disabled].filter(Boolean).join(\":\");\n        result += itemString + \",\";\n      }\n      return result;\n    });\n    __publicField(this, \"toJSON\", () => {\n      return {\n        size: this.size,\n        first: this.firstValue,\n        last: this.lastValue\n      };\n    });\n    this.items = [...options.items];\n  }\n  /**\n   * Returns the number of items in the collection\n   */\n  get size() {\n    return this.items.length;\n  }\n  /**\n   * Returns the first value in the collection\n   */\n  get firstValue() {\n    let index = 0;\n    while (this.getItemDisabled(this.at(index))) index++;\n    return this.getItemValue(this.at(index));\n  }\n  /**\n   * Returns the last value in the collection\n   */\n  get lastValue() {\n    let index = this.size - 1;\n    while (this.getItemDisabled(this.at(index))) index--;\n    return this.getItemValue(this.at(index));\n  }\n  *[Symbol.iterator]() {\n    yield* this.items;\n  }\n};\nvar match = (label, query) => {\n  return !!label?.toLowerCase().startsWith(query.toLowerCase());\n};\nvar wrap = (v, idx) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length]);\n};\nfunction isListCollection(v) {\n  return v instanceof ListCollection;\n}\nfunction insert(items, index, ...values) {\n  return [...items.slice(0, index), ...values, ...items.slice(index)];\n}\nfunction move(items, indices, toIndex) {\n  indices = [...indices].sort((a, b) => a - b);\n  const itemsToMove = indices.map(i => items[i]);\n  for (let i = indices.length - 1; i >= 0; i--) {\n    items = [...items.slice(0, indices[i]), ...items.slice(indices[i] + 1)];\n  }\n  toIndex = Math.max(0, toIndex - indices.filter(i => i < toIndex).length);\n  return [...items.slice(0, toIndex), ...itemsToMove, ...items.slice(toIndex)];\n}\n\n// src/grid-collection.ts\nvar GridCollection = class extends ListCollection {\n  constructor(options) {\n    const {\n      columnCount\n    } = options;\n    super(options);\n    __publicField(this, \"columnCount\");\n    /**\n     * Returns the row data in the grid\n     */\n    __publicField(this, \"getRows\", () => {\n      return chunk([...this.items], this.columnCount);\n    });\n    /**\n     * Returns the number of rows in the grid\n     */\n    __publicField(this, \"getRowCount\", () => {\n      return this.getRows().length;\n    });\n    /**\n     * Returns the index of the specified row and column in the grid\n     */\n    __publicField(this, \"getCellIndex\", (row, column) => {\n      return row * this.columnCount + column;\n    });\n    /**\n     * Returns the item at the specified row and column in the grid\n     */\n    __publicField(this, \"getCell\", (row, column) => {\n      return this.at(this.getCellIndex(row, column));\n    });\n    /**\n     * Returns the row and column index for a given value\n     */\n    __publicField(this, \"getValueCell\", value => {\n      const index = this.indexOf(value);\n      if (index === -1) return null;\n      const row = Math.floor(index / this.columnCount);\n      const column = index % this.columnCount;\n      return {\n        row,\n        column\n      };\n    });\n    /**\n     * Returns the value of the last enabled column in a row\n     */\n    __publicField(this, \"getLastEnabledColumnIndex\", row => {\n      for (let col = this.columnCount - 1; col >= 0; col--) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the index of the first enabled column in a row\n     */\n    __publicField(this, \"getFirstEnabledColumnIndex\", row => {\n      for (let col = 0; col < this.columnCount; col++) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the value of the previous row in the grid, based on the current value\n     */\n    __publicField(this, \"getPreviousRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let prevRowIndex = currentCell.row;\n      let prevColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        prevRowIndex = prevIndex(rows, prevRowIndex, {\n          loop\n        });\n        const prevRow = rows[prevRowIndex];\n        if (!prevRow) continue;\n        const prevCell = prevRow[prevColumnIndex];\n        if (!prevCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(prevRowIndex);\n          if (lastColumnIndex != null) {\n            prevColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(prevRowIndex, prevColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.firstValue;\n    });\n    /**\n     * Returns the value of the next row in the grid, based on the current value\n     */\n    __publicField(this, \"getNextRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let nextRowIndex = currentCell.row;\n      let nextColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        nextRowIndex = nextIndex(rows, nextRowIndex, {\n          loop\n        });\n        const nextRow = rows[nextRowIndex];\n        if (!nextRow) continue;\n        const nextCell = nextRow[nextColumnIndex];\n        if (!nextCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(nextRowIndex);\n          if (lastColumnIndex != null) {\n            nextColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(nextRowIndex, nextColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.lastValue;\n    });\n    this.columnCount = columnCount;\n  }\n};\nfunction isGridCollection(v) {\n  return v instanceof GridCollection;\n}\n\n// src/tree-visit.ts\nfunction access(node, indexPath, options) {\n  for (let i = 0; i < indexPath.length; i++) node = options.getChildren(node, indexPath.slice(i + 1))[indexPath[i]];\n  return node;\n}\nfunction ancestorIndexPaths(indexPaths) {\n  const sortedPaths = sortIndexPaths(indexPaths);\n  const result = [];\n  const seen = /* @__PURE__ */new Set();\n  for (const indexPath of sortedPaths) {\n    const key = indexPath.join();\n    if (!seen.has(key)) {\n      seen.add(key);\n      result.push(indexPath);\n    }\n  }\n  return result;\n}\nfunction compareIndexPaths(a, b) {\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    if (a[i] < b[i]) return -1;\n    if (a[i] > b[i]) return 1;\n  }\n  return a.length - b.length;\n}\nfunction sortIndexPaths(indexPaths) {\n  return indexPaths.sort(compareIndexPaths);\n}\nfunction find(node, options) {\n  let found;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = child;\n        return \"stop\";\n      }\n    }\n  });\n  return found;\n}\nfunction findIndexPath(node, options) {\n  let found;\n  visit(node, {\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = [...indexPath];\n        return \"stop\";\n      }\n    },\n    getChildren: options.getChildren\n  });\n  return found;\n}\nfunction reduce(node, options) {\n  let result = options.initialResult;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      result = options.nextResult(result, child, indexPath);\n    }\n  });\n  return result;\n}\nfunction flatMap(node, options) {\n  return reduce(node, {\n    ...options,\n    initialResult: [],\n    nextResult: (result, child, indexPath) => {\n      result.push(...options.transform(child, indexPath));\n      return result;\n    }\n  });\n}\nfunction insertOperation(index, nodes) {\n  return {\n    type: \"insert\",\n    index,\n    nodes\n  };\n}\nfunction removeOperation(indexes) {\n  return {\n    type: \"remove\",\n    indexes\n  };\n}\nfunction replaceOperation() {\n  return {\n    type: \"replace\"\n  };\n}\nfunction splitIndexPath(indexPath) {\n  return [indexPath.slice(0, -1), indexPath[indexPath.length - 1]];\n}\nfunction getInsertionOperations(indexPath, nodes, operations = /* @__PURE__ */new Map()) {\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    switch (operations.get(parentKey)?.type) {\n      case \"remove\":\n        continue;\n    }\n    operations.set(parentKey, replaceOperation());\n  }\n  const operation = operations.get(parentIndexPath.join());\n  switch (operation?.type) {\n    case \"remove\":\n      operations.set(parentIndexPath.join(), {\n        type: \"removeThenInsert\",\n        removeIndexes: operation.indexes,\n        insertIndex: index,\n        insertNodes: nodes\n      });\n      break;\n    default:\n      operations.set(parentIndexPath.join(), insertOperation(index, nodes));\n  }\n  return operations;\n}\nfunction getRemovalOperations(indexPaths) {\n  const operations = /* @__PURE__ */new Map();\n  const indexesToRemove = /* @__PURE__ */new Map();\n  for (const indexPath of indexPaths) {\n    const parentKey = indexPath.slice(0, -1).join();\n    const value = indexesToRemove.get(parentKey) ?? [];\n    value.push(indexPath[indexPath.length - 1]);\n    indexesToRemove.set(parentKey, value.sort((a, b) => a - b));\n  }\n  for (const indexPath of indexPaths) {\n    for (let i = indexPath.length - 2; i >= 0; i--) {\n      const parentKey = indexPath.slice(0, i).join();\n      if (!operations.has(parentKey)) {\n        operations.set(parentKey, replaceOperation());\n      }\n    }\n  }\n  for (const [parentKey, indexes] of indexesToRemove) {\n    operations.set(parentKey, removeOperation(indexes));\n  }\n  return operations;\n}\nfunction getReplaceOperations(indexPath, node) {\n  const operations = /* @__PURE__ */new Map();\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    operations.set(parentKey, replaceOperation());\n  }\n  operations.set(parentIndexPath.join(), {\n    type: \"removeThenInsert\",\n    removeIndexes: [index],\n    insertIndex: index,\n    insertNodes: [node]\n  });\n  return operations;\n}\nfunction mutate(node, operations, options) {\n  return map(node, {\n    ...options,\n    getChildren: (node2, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"replace\":\n        case \"remove\":\n        case \"removeThenInsert\":\n        case \"insert\":\n          return options.getChildren(node2, indexPath);\n        default:\n          return [];\n      }\n    },\n    transform: (node2, children, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"remove\":\n          return options.create(node2, children.filter((_, index) => !operation.indexes.includes(index)), indexPath);\n        case \"removeThenInsert\":\n          const updatedChildren = children.filter((_, index) => !operation.removeIndexes.includes(index));\n          const adjustedIndex = operation.removeIndexes.reduce((index, removedIndex) => removedIndex < index ? index - 1 : index, operation.insertIndex);\n          return options.create(node2, splice(updatedChildren, adjustedIndex, 0, ...operation.insertNodes), indexPath);\n        case \"insert\":\n          return options.create(node2, splice(children, operation.index, 0, ...operation.nodes), indexPath);\n        case \"replace\":\n          return options.create(node2, children, indexPath);\n        default:\n          return node2;\n      }\n    }\n  });\n}\nfunction splice(array, start, deleteCount, ...items) {\n  return [...array.slice(0, start), ...items, ...array.slice(start + deleteCount)];\n}\nfunction map(node, options) {\n  const childrenMap = {};\n  visit(node, {\n    ...options,\n    onLeave: (child, indexPath) => {\n      const keyIndexPath = [0, ...indexPath];\n      const key = keyIndexPath.join();\n      const transformed = options.transform(child, childrenMap[key] ?? [], indexPath);\n      const parentKey = keyIndexPath.slice(0, -1).join();\n      const parentChildren = childrenMap[parentKey] ?? [];\n      parentChildren.push(transformed);\n      childrenMap[parentKey] = parentChildren;\n    }\n  });\n  return childrenMap[\"\"][0];\n}\nfunction insert2(node, options) {\n  const {\n    nodes,\n    at\n  } = options;\n  if (at.length === 0) throw new Error(`Can't insert nodes at the root`);\n  const state = getInsertionOperations(at, nodes);\n  return mutate(node, state, options);\n}\nfunction replace(node, options) {\n  if (options.at.length === 0) return options.node;\n  const operations = getReplaceOperations(options.at, options.node);\n  return mutate(node, operations, options);\n}\nfunction remove(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't remove the root node`);\n  }\n  const operations = getRemovalOperations(options.indexPaths);\n  return mutate(node, operations, options);\n}\nfunction move2(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't move the root node`);\n  }\n  if (options.to.length === 0) throw new Error(`Can't move nodes to the root`);\n  const _ancestorIndexPaths = ancestorIndexPaths(options.indexPaths);\n  const nodesToInsert = _ancestorIndexPaths.map(indexPath => access(node, indexPath, options));\n  const operations = getInsertionOperations(options.to, nodesToInsert, getRemovalOperations(_ancestorIndexPaths));\n  return mutate(node, operations, options);\n}\nfunction visit(node, options) {\n  const {\n    onEnter,\n    onLeave,\n    getChildren\n  } = options;\n  let indexPath = [];\n  let stack = [{\n    node\n  }];\n  const getIndexPath = options.reuseIndexPath ? () => indexPath : () => indexPath.slice();\n  while (stack.length > 0) {\n    let wrapper = stack[stack.length - 1];\n    if (wrapper.state === void 0) {\n      const enterResult = onEnter?.(wrapper.node, getIndexPath());\n      if (enterResult === \"stop\") return;\n      wrapper.state = enterResult === \"skip\" ? -1 : 0;\n    }\n    const children = wrapper.children || getChildren(wrapper.node, getIndexPath());\n    wrapper.children || (wrapper.children = children);\n    if (wrapper.state !== -1) {\n      if (wrapper.state < children.length) {\n        let currentIndex = wrapper.state;\n        indexPath.push(currentIndex);\n        stack.push({\n          node: children[currentIndex]\n        });\n        wrapper.state = currentIndex + 1;\n        continue;\n      }\n      const leaveResult = onLeave?.(wrapper.node, getIndexPath());\n      if (leaveResult === \"stop\") return;\n    }\n    indexPath.pop();\n    stack.pop();\n  }\n}\n\n// src/tree-collection.ts\nvar TreeCollection = class {\n  constructor(options) {\n    this.options = options;\n    __publicField(this, \"rootNode\");\n    __publicField(this, \"isEqual\", other => {\n      return isEqual(this.rootNode, other.rootNode);\n    });\n    __publicField(this, \"getNodeChildren\", node => {\n      return this.options.nodeToChildren?.(node) ?? fallback2.nodeToChildren(node) ?? [];\n    });\n    __publicField(this, \"getNodeValue\", node => {\n      return this.options.nodeToValue?.(node) ?? fallback2.nodeToValue(node);\n    });\n    __publicField(this, \"getNodeDisabled\", node => {\n      return this.options.isNodeDisabled?.(node) ?? fallback2.isNodeDisabled(node);\n    });\n    __publicField(this, \"stringify\", value => {\n      const node = this.findNode(value);\n      if (!node) return null;\n      return this.stringifyNode(node);\n    });\n    __publicField(this, \"stringifyNode\", node => {\n      return this.options.nodeToString?.(node) ?? fallback2.nodeToString(node);\n    });\n    __publicField(this, \"getFirstNode\", (rootNode = this.rootNode) => {\n      let firstChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (!firstChild && indexPath.length > 0 && !this.getNodeDisabled(node)) {\n            firstChild = node;\n            return \"stop\";\n          }\n        }\n      });\n      return firstChild;\n    });\n    __publicField(this, \"getLastNode\", (rootNode = this.rootNode, opts = {}) => {\n      let lastChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({\n            value: nodeValue,\n            node,\n            indexPath\n          })) return \"skip\";\n          if (indexPath.length > 1) return \"skip\";\n          if (!this.getNodeDisabled(node)) {\n            lastChild = node;\n          }\n        }\n      });\n      return lastChild;\n    });\n    __publicField(this, \"at\", indexPath => {\n      return access(this.rootNode, indexPath, {\n        getChildren: this.getNodeChildren\n      });\n    });\n    __publicField(this, \"findNode\", (value, rootNode = this.rootNode) => {\n      return find(rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: node => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"sort\", values => {\n      return values.reduce((acc, value) => {\n        const indexPath = this.getIndexPath(value);\n        if (indexPath != null) acc.push({\n          value,\n          indexPath\n        });\n        return acc;\n      }, []).sort((a, b) => compareIndexPaths(a.indexPath, b.indexPath)).map(({\n        value\n      }) => value);\n    });\n    __publicField(this, \"getIndexPath\", value => {\n      return findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: node => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"getValue\", indexPath => {\n      const node = this.at(indexPath);\n      return node ? this.getNodeValue(node) : void 0;\n    });\n    __publicField(this, \"getValuePath\", indexPath => {\n      if (!indexPath) return [];\n      const valuePath = [];\n      let currentPath = [...indexPath];\n      while (currentPath.length > 0) {\n        const node = this.at(currentPath);\n        if (node) valuePath.unshift(this.getNodeValue(node));\n        currentPath.pop();\n      }\n      return valuePath;\n    });\n    __publicField(this, \"getDepth\", value => {\n      const indexPath = findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: node => this.getNodeValue(node) === value\n      });\n      return indexPath?.length ?? 0;\n    });\n    __publicField(this, \"isRootNode\", node => {\n      return this.getNodeValue(node) === this.getNodeValue(this.rootNode);\n    });\n    __publicField(this, \"contains\", (parentIndexPath, valueIndexPath) => {\n      if (!parentIndexPath || !valueIndexPath) return false;\n      return valueIndexPath.slice(0, parentIndexPath.length).every((_, i) => parentIndexPath[i] === valueIndexPath[i]);\n    });\n    __publicField(this, \"getNextNode\", (value, opts = {}) => {\n      let found = false;\n      let nextNode;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({\n            value: nodeValue,\n            node,\n            indexPath\n          })) {\n            if (nodeValue === value) {\n              found = true;\n            }\n            return \"skip\";\n          }\n          if (found && !this.getNodeDisabled(node)) {\n            nextNode = node;\n            return \"stop\";\n          }\n          if (nodeValue === value) {\n            found = true;\n          }\n        }\n      });\n      return nextNode;\n    });\n    __publicField(this, \"getPreviousNode\", (value, opts = {}) => {\n      let previousNode;\n      let found = false;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({\n            value: nodeValue,\n            node,\n            indexPath\n          })) {\n            return \"skip\";\n          }\n          if (nodeValue === value) {\n            found = true;\n            return \"stop\";\n          }\n          if (!this.getNodeDisabled(node)) {\n            previousNode = node;\n          }\n        }\n      });\n      return found ? previousNode : void 0;\n    });\n    __publicField(this, \"getParentNodes\", values => {\n      const result = [];\n      let indexPath = this.getIndexPath(values);\n      while (indexPath && indexPath.length > 0) {\n        indexPath.pop();\n        const parentNode = this.at(indexPath);\n        if (parentNode && !this.isRootNode(parentNode)) {\n          result.unshift(parentNode);\n        }\n      }\n      return result;\n    });\n    __publicField(this, \"getParentIndexPath\", indexPath => {\n      return indexPath.slice(0, -1);\n    });\n    __publicField(this, \"getParentNode\", valueOrIndexPath => {\n      const indexPath = typeof valueOrIndexPath === \"string\" ? this.getIndexPath(valueOrIndexPath) : valueOrIndexPath;\n      return indexPath ? this.at(this.getParentIndexPath(indexPath)) : void 0;\n    });\n    __publicField(this, \"visit\", opts => {\n      const {\n        skip,\n        ...rest\n      } = opts;\n      visit(this.rootNode, {\n        ...rest,\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          if (skip?.({\n            value: this.getNodeValue(node),\n            node,\n            indexPath\n          })) return \"skip\";\n          return rest.onEnter?.(node, indexPath);\n        }\n      });\n    });\n    __publicField(this, \"getPreviousSibling\", indexPath => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = siblings.findIndex(sibling => this.getValue(indexPath) === this.getNodeValue(sibling));\n      while (--idx >= 0) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getNextSibling\", indexPath => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = siblings.findIndex(sibling => this.getValue(indexPath) === this.getNodeValue(sibling));\n      while (++idx < siblings.length) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getSiblingNodes\", indexPath => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this.getNodeChildren(parentNode) : [];\n    });\n    __publicField(this, \"getValues\", (rootNode = this.rootNode) => {\n      const values = flatMap(rootNode, {\n        getChildren: this.getNodeChildren,\n        transform: node => [this.getNodeValue(node)]\n      });\n      return values.slice(1);\n    });\n    __publicField(this, \"isSameDepth\", (indexPath, depth) => {\n      if (depth == null) return true;\n      return indexPath.length === depth;\n    });\n    __publicField(this, \"isBranchNode\", node => {\n      return this.getNodeChildren(node).length > 0;\n    });\n    __publicField(this, \"getBranchValues\", (rootNode = this.rootNode, opts = {}) => {\n      let values = [];\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({\n            value: nodeValue,\n            node,\n            indexPath\n          })) return \"skip\";\n          if (this.getNodeChildren(node).length > 0 && this.isSameDepth(indexPath, opts.depth)) {\n            values.push(this.getNodeValue(node));\n          }\n        }\n      });\n      return values.slice(1);\n    });\n    __publicField(this, \"flatten\", (rootNode = this.rootNode) => {\n      const nodes = flatMap(rootNode, {\n        getChildren: this.getNodeChildren,\n        transform: (node, indexPath) => {\n          const children = this.getNodeChildren(node).map(child => this.getNodeValue(child));\n          return [compact({\n            label: this.stringifyNode(node),\n            value: this.getNodeValue(node),\n            indexPath,\n            children: children.length > 0 ? children : void 0\n          })];\n        }\n      });\n      return nodes.slice(1);\n    });\n    __publicField(this, \"_create\", (node, children) => {\n      return compact({\n        ...node,\n        children\n      });\n    });\n    __publicField(this, \"_insert\", (rootNode, indexPath, nodes) => {\n      return insert2(rootNode, {\n        at: indexPath,\n        nodes,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      });\n    });\n    __publicField(this, \"_replace\", (rootNode, indexPath, node) => {\n      return replace(rootNode, {\n        at: indexPath,\n        node,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      });\n    });\n    __publicField(this, \"_move\", (rootNode, indexPaths, to) => {\n      return move2(rootNode, {\n        indexPaths,\n        to,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      });\n    });\n    __publicField(this, \"_remove\", (rootNode, indexPaths) => {\n      return remove(rootNode, {\n        indexPaths,\n        getChildren: this.getNodeChildren,\n        create: this._create\n      });\n    });\n    __publicField(this, \"replace\", (indexPath, node) => {\n      return this._replace(this.rootNode, indexPath, node);\n    });\n    __publicField(this, \"remove\", indexPaths => {\n      return this._remove(this.rootNode, indexPaths);\n    });\n    __publicField(this, \"insertBefore\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this._insert(this.rootNode, indexPath, nodes) : void 0;\n    });\n    __publicField(this, \"insertAfter\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const nextIndex2 = [...indexPath.slice(0, -1), indexPath[indexPath.length - 1] + 1];\n      return this._insert(this.rootNode, nextIndex2, nodes);\n    });\n    __publicField(this, \"move\", (fromIndexPaths, toIndexPath) => {\n      return this._move(this.rootNode, fromIndexPaths, toIndexPath);\n    });\n    __publicField(this, \"toJSON\", () => {\n      return this.getValues(this.rootNode);\n    });\n    this.rootNode = options.rootNode;\n  }\n};\nfunction flattenedToTree(nodes) {\n  let rootNode = {\n    value: \"ROOT\"\n  };\n  nodes.map(node => {\n    const {\n      indexPath,\n      label,\n      value\n    } = node;\n    if (!indexPath.length) {\n      Object.assign(rootNode, {\n        label,\n        value,\n        children: []\n      });\n      return;\n    }\n    rootNode = insert2(rootNode, {\n      at: indexPath,\n      nodes: [compact({\n        label,\n        value\n      })],\n      getChildren: node2 => node2.children ?? [],\n      create: (node2, children) => {\n        return compact({\n          ...node2,\n          children\n        });\n      }\n    });\n  });\n  return new TreeCollection({\n    rootNode\n  });\n}\nfunction filePathToTree(paths) {\n  const rootNode = {\n    label: \"\",\n    value: \"ROOT\",\n    children: []\n  };\n  paths.forEach(path => {\n    const parts = path.split(\"/\");\n    let currentNode = rootNode;\n    parts.forEach(part => {\n      let childNode = currentNode.children?.find(child => child.label === part);\n      if (!childNode) {\n        childNode = {\n          value: parts.slice(0, parts.indexOf(part) + 1).join(\"/\"),\n          label: part\n        };\n        currentNode.children || (currentNode.children = []);\n        currentNode.children.push(childNode);\n      }\n      currentNode = childNode;\n    });\n  });\n  return new TreeCollection({\n    rootNode\n  });\n}\nvar fallback2 = {\n  nodeToValue(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"value\")) return node.value;\n    return \"\";\n  },\n  nodeToString(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"label\")) return node.label;\n    return fallback2.nodeToValue(node);\n  },\n  isNodeDisabled(node) {\n    if (isObject(node) && hasProp(node, \"disabled\")) return !!node.disabled;\n    return false;\n  },\n  nodeToChildren(node) {\n    return node.children;\n  }\n};\nvar Selection = class _Selection extends Set {\n  constructor(values = []) {\n    super(values);\n    __publicField(this, \"selectionMode\", \"single\");\n    __publicField(this, \"deselectable\", true);\n    __publicField(this, \"copy\", () => {\n      const clone = new _Selection([...this]);\n      return this.sync(clone);\n    });\n    __publicField(this, \"sync\", other => {\n      other.selectionMode = this.selectionMode;\n      other.deselectable = this.deselectable;\n      return other;\n    });\n    __publicField(this, \"isEmpty\", () => {\n      return this.size === 0;\n    });\n    __publicField(this, \"isSelected\", value => {\n      if (this.selectionMode === \"none\" || value == null) {\n        return false;\n      }\n      return this.has(value);\n    });\n    __publicField(this, \"canSelect\", (collection, value) => {\n      return this.selectionMode !== \"none\" || !collection.getItemDisabled(collection.find(value));\n    });\n    __publicField(this, \"firstSelectedValue\", collection => {\n      let firstValue = null;\n      for (let value of this) {\n        if (!firstValue || collection.compareValue(value, firstValue) < 0) {\n          firstValue = value;\n        }\n      }\n      return firstValue;\n    });\n    __publicField(this, \"lastSelectedValue\", collection => {\n      let lastValue = null;\n      for (let value of this) {\n        if (!lastValue || collection.compareValue(value, lastValue) > 0) {\n          lastValue = value;\n        }\n      }\n      return lastValue;\n    });\n    __publicField(this, \"extendSelection\", (collection, anchorValue, targetValue) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        return this.replaceSelection(collection, targetValue);\n      }\n      const selection = this.copy();\n      const lastSelected = Array.from(this).pop();\n      for (let key of collection.getValueRange(anchorValue, lastSelected ?? targetValue)) {\n        selection.delete(key);\n      }\n      for (let key of collection.getValueRange(targetValue, anchorValue)) {\n        if (this.canSelect(collection, key)) {\n          selection.add(key);\n        }\n      }\n      return selection;\n    });\n    __publicField(this, \"toggleSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\" && !this.isSelected(value)) {\n        return this.replaceSelection(collection, value);\n      }\n      const selection = this.copy();\n      if (selection.has(value)) {\n        selection.delete(value);\n      } else if (selection.canSelect(collection, value)) {\n        selection.add(value);\n      }\n      return selection;\n    });\n    __publicField(this, \"replaceSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (value == null) {\n        return this;\n      }\n      if (!this.canSelect(collection, value)) {\n        return this;\n      }\n      const selection = new _Selection([value]);\n      return this.sync(selection);\n    });\n    __publicField(this, \"setSelection\", values => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      let selection = new _Selection();\n      for (let value of values) {\n        if (value != null) {\n          selection.add(value);\n          if (this.selectionMode === \"single\") {\n            break;\n          }\n        }\n      }\n      return this.sync(selection);\n    });\n    __publicField(this, \"clearSelection\", () => {\n      const selection = this.copy();\n      if (selection.deselectable && selection.size > 0) {\n        selection.clear();\n      }\n      return selection;\n    });\n    __publicField(this, \"select\", (collection, value, forceToggle) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        if (this.isSelected(value) && this.deselectable) {\n          return this.toggleSelection(collection, value);\n        } else {\n          return this.replaceSelection(collection, value);\n        }\n      } else if (this.selectionMode === \"multiple\" || forceToggle) {\n        return this.toggleSelection(collection, value);\n      } else {\n        return this.replaceSelection(collection, value);\n      }\n    });\n    __publicField(this, \"deselect\", value => {\n      const selection = this.copy();\n      selection.delete(value);\n      return selection;\n    });\n    __publicField(this, \"isEqual\", other => {\n      return isEqual(Array.from(this), Array.from(other));\n    });\n  }\n};\nexport { GridCollection, ListCollection, Selection, TreeCollection, filePathToTree, flattenedToTree, isGridCollection, isListCollection };","map":{"version":3,"names":["compact","isEqual","chunk","prevIndex","nextIndex","isObject","hasProp","__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","fallback","itemToValue","item","itemToString","label","isItemDisabled","disabled","ListCollection","_ListCollection","constructor","options","items","other","copy","Array","from","map","getItemValue","filter","Boolean","index","findIndex","values","find","valueA","valueB","indexA","indexOf","indexB","sort","sortFn","bind","stringifyItem","separator","join","stringifyItems","findMany","has","step","clamp","Math","min","size","getItemDisabled","at","max","text","current","wrap","isSingleKey","length","match","queryString","state","currentValue","timeout","search","keysSoFar","isRepeated","every","char","query","getByText","cleanup","clearTimeout","timer","update","value2","setTimeout","item2","slice","insert","toIndex","itemsOrValues","itemOrValue","includes","fromIndex","move","a","b","to","keys","push","getNextValue","compareValue","range","result","itemString","first","firstValue","last","lastValue","Symbol","iterator","toLowerCase","startsWith","v","idx","_","isListCollection","indices","itemsToMove","i","GridCollection","columnCount","getRows","row","column","getCellIndex","floor","col","cell","getCell","loop","currentCell","getValueCell","rows","rowCount","getRowCount","prevRowIndex","prevColumnIndex","prevRow","prevCell","lastColumnIndex","getLastEnabledColumnIndex","nextRowIndex","nextColumnIndex","nextRow","nextCell","isGridCollection","access","node","indexPath","getChildren","ancestorIndexPaths","indexPaths","sortedPaths","sortIndexPaths","seen","Set","add","compareIndexPaths","found","visit","onEnter","child","predicate","findIndexPath","reduce","initialResult","nextResult","flatMap","transform","insertOperation","nodes","type","removeOperation","indexes","replaceOperation","splitIndexPath","getInsertionOperations","operations","Map","parentIndexPath","parentKey","get","set","operation","removeIndexes","insertIndex","insertNodes","getRemovalOperations","indexesToRemove","getReplaceOperations","mutate","node2","children","create","updatedChildren","adjustedIndex","removedIndex","splice","array","start","deleteCount","childrenMap","onLeave","keyIndexPath","transformed","parentChildren","insert2","Error","replace","remove","move2","_ancestorIndexPaths","nodesToInsert","stack","getIndexPath","reuseIndexPath","wrapper","enterResult","currentIndex","leaveResult","pop","TreeCollection","rootNode","nodeToChildren","fallback2","nodeToValue","isNodeDisabled","findNode","stringifyNode","nodeToString","firstChild","getNodeChildren","getNodeDisabled","opts","lastChild","nodeValue","getNodeValue","skip","acc","valuePath","currentPath","unshift","valueIndexPath","nextNode","isRootNode","previousNode","parentNode","valueOrIndexPath","getParentIndexPath","rest","getParentNode","siblings","sibling","getValue","depth","isSameDepth","_create","_replace","_remove","_insert","nextIndex2","fromIndexPaths","toIndexPath","_move","getValues","flattenedToTree","assign","filePathToTree","paths","forEach","path","parts","split","currentNode","part","childNode","Selection","_Selection","clone","sync","selectionMode","deselectable","collection","anchorValue","targetValue","replaceSelection","selection","lastSelected","getValueRange","delete","canSelect","isSelected","clear","forceToggle","toggleSelection"],"sources":["C:/Users/Teren/Documents/GitHub/arbitrage-betting/node_modules/@zag-js/collection/dist/index.mjs"],"sourcesContent":["import { compact, isEqual, chunk, prevIndex, nextIndex, isObject, hasProp } from '@zag-js/utils';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar fallback = {\n  itemToValue(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"value\")) return item.value;\n    return \"\";\n  },\n  itemToString(item) {\n    if (typeof item === \"string\") return item;\n    if (isObject(item) && hasProp(item, \"label\")) return item.label;\n    return fallback.itemToValue(item);\n  },\n  isItemDisabled(item) {\n    if (isObject(item) && hasProp(item, \"disabled\")) return !!item.disabled;\n    return false;\n  }\n};\nvar ListCollection = class _ListCollection {\n  constructor(options) {\n    this.options = options;\n    /**\n     * The items in the collection\n     */\n    __publicField(this, \"items\");\n    __publicField(this, \"copy\", (items) => {\n      return new _ListCollection({ ...this.options, items: items ?? [...this.items] });\n    });\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(this.items, other.items);\n    });\n    /**\n     * Function to update the collection items\n     */\n    __publicField(this, \"setItems\", (items) => {\n      return this.copy(items);\n    });\n    /**\n     * Returns all the values in the collection\n     */\n    __publicField(this, \"getValues\", (items = this.items) => {\n      return Array.from(items).map((item) => this.getItemValue(item)).filter(Boolean);\n    });\n    /**\n     * Get the item based on its value\n     */\n    __publicField(this, \"find\", (value) => {\n      if (value == null) return null;\n      const index = this.items.findIndex((item) => this.getItemValue(item) === value);\n      return index != null ? this.items[index] : null;\n    });\n    /**\n     * Get the items based on its values\n     */\n    __publicField(this, \"findMany\", (values) => {\n      return Array.from(values).map((value) => this.find(value)).filter((item) => item != null);\n    });\n    /**\n     * Get the item based on its index\n     */\n    __publicField(this, \"at\", (index) => {\n      return this.items[index] ?? null;\n    });\n    __publicField(this, \"sortFn\", (valueA, valueB) => {\n      const indexA = this.indexOf(valueA);\n      const indexB = this.indexOf(valueB);\n      return (indexA ?? 0) - (indexB ?? 0);\n    });\n    /**\n     * Sort the values based on their index\n     */\n    __publicField(this, \"sort\", (values) => {\n      return [...values].sort(this.sortFn.bind(this));\n    });\n    /**\n     * Convert an item to a value\n     */\n    __publicField(this, \"getItemValue\", (item) => {\n      if (item == null) return null;\n      return this.options.itemToValue?.(item) ?? fallback.itemToValue(item);\n    });\n    /**\n     * Whether an item is disabled\n     */\n    __publicField(this, \"getItemDisabled\", (item) => {\n      if (item == null) return false;\n      return this.options.isItemDisabled?.(item) ?? fallback.isItemDisabled(item);\n    });\n    /**\n     * Convert an item to a string\n     */\n    __publicField(this, \"stringifyItem\", (item) => {\n      if (item == null) return null;\n      return this.options.itemToString?.(item) ?? fallback.itemToString(item);\n    });\n    /**\n     * Convert a value to a string\n     */\n    __publicField(this, \"stringify\", (value) => {\n      if (value == null) return null;\n      return this.stringifyItem(this.find(value));\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyItems\", (items, separator = \", \") => {\n      return Array.from(items).map((item) => this.stringifyItem(item)).filter(Boolean).join(separator);\n    });\n    /**\n     * Convert an array of items to a string\n     */\n    __publicField(this, \"stringifyMany\", (value, separator) => {\n      return this.stringifyItems(this.findMany(value), separator);\n    });\n    /**\n     * Whether the collection has a value\n     */\n    __publicField(this, \"has\", (value) => {\n      return this.indexOf(value) !== -1;\n    });\n    /**\n     * Whether the collection has an item\n     */\n    __publicField(this, \"hasItem\", (item) => {\n      if (item == null) return false;\n      return this.has(this.getItemValue(item));\n    });\n    /**\n     * Returns the next value in the collection\n     */\n    __publicField(this, \"getNextValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.min(index + step, this.size - 1) : index + step;\n      while (index <= this.size && this.getItemDisabled(this.at(index))) index++;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Returns the previous value in the collection\n     */\n    __publicField(this, \"getPreviousValue\", (value, step = 1, clamp = false) => {\n      let index = this.indexOf(value);\n      if (index === -1) return null;\n      index = clamp ? Math.max(index - step, 0) : index - step;\n      while (index >= 0 && this.getItemDisabled(this.at(index))) index--;\n      return this.getItemValue(this.at(index));\n    });\n    /**\n     * Get the index of an item based on its key\n     */\n    __publicField(this, \"indexOf\", (value) => {\n      if (value == null) return -1;\n      return this.items.findIndex((item) => this.getItemValue(item) === value);\n    });\n    __publicField(this, \"getByText\", (text, current) => {\n      let items = current != null ? wrap(this.items, this.indexOf(current)) : this.items;\n      const isSingleKey = text.length === 1;\n      if (isSingleKey) items = items.filter((item) => this.getItemValue(item) !== current);\n      return items.find((item) => match(this.stringifyItem(item), text));\n    });\n    /**\n     * Search for a value based on a query\n     */\n    __publicField(this, \"search\", (queryString, options) => {\n      const { state, currentValue, timeout = 350 } = options;\n      const search = state.keysSoFar + queryString;\n      const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n      const query = isRepeated ? search[0] : search;\n      const item = this.getByText(query, currentValue);\n      const value = this.getItemValue(item);\n      function cleanup() {\n        clearTimeout(state.timer);\n        state.timer = -1;\n      }\n      function update(value2) {\n        state.keysSoFar = value2;\n        cleanup();\n        if (value2 !== \"\") {\n          state.timer = +setTimeout(() => {\n            update(\"\");\n            cleanup();\n          }, timeout);\n        }\n      }\n      update(search);\n      return value;\n    });\n    __publicField(this, \"update\", (value, item) => {\n      let index = this.items.findIndex((item2) => this.getItemValue(item2) === value);\n      if (index === -1) return this;\n      return this.copy([...this.items.slice(0, index), item, ...this.items.slice(index + 1)]);\n    });\n    __publicField(this, \"insert\", (index, ...items) => {\n      return this.copy(insert(this.items, index, ...items));\n    });\n    __publicField(this, \"insertBefore\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;\n        else return this;\n      }\n      return this.copy(insert(this.items, toIndex, ...items));\n    });\n    __publicField(this, \"insertAfter\", (value, ...items) => {\n      let toIndex = this.indexOf(value);\n      if (toIndex === -1) {\n        if (this.items.length === 0) toIndex = 0;\n        else return this;\n      }\n      return this.copy(insert(this.items, toIndex + 1, ...items));\n    });\n    __publicField(this, \"prepend\", (...items) => {\n      return this.copy(insert(this.items, 0, ...items));\n    });\n    __publicField(this, \"append\", (...items) => {\n      return this.copy(insert(this.items, this.items.length, ...items));\n    });\n    __publicField(this, \"remove\", (...itemsOrValues) => {\n      const values = itemsOrValues.map(\n        (itemOrValue) => typeof itemOrValue === \"string\" ? itemOrValue : this.getItemValue(itemOrValue)\n      );\n      return this.copy(\n        this.items.filter((item) => {\n          const value = this.getItemValue(item);\n          if (value == null) return false;\n          return !values.includes(value);\n        })\n      );\n    });\n    __publicField(this, \"move\", (value, toIndex) => {\n      const fromIndex = this.indexOf(value);\n      if (fromIndex === -1) return this;\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    __publicField(this, \"reorder\", (fromIndex, toIndex) => {\n      return this.copy(move(this.items, [fromIndex], toIndex));\n    });\n    __publicField(this, \"compareValue\", (a, b) => {\n      const indexA = this.indexOf(a);\n      const indexB = this.indexOf(b);\n      if (indexA < indexB) return -1;\n      if (indexA > indexB) return 1;\n      return 0;\n    });\n    __publicField(this, \"range\", (from, to) => {\n      let keys = [];\n      let key = from;\n      while (key != null) {\n        let item = this.find(key);\n        if (item) keys.push(key);\n        if (key === to) return keys;\n        key = this.getNextValue(key);\n      }\n      return [];\n    });\n    __publicField(this, \"getValueRange\", (from, to) => {\n      if (from && to) {\n        if (this.compareValue(from, to) <= 0) {\n          return this.range(from, to);\n        }\n        return this.range(to, from);\n      }\n      return [];\n    });\n    __publicField(this, \"toString\", () => {\n      let result = \"\";\n      for (const item of this.items) {\n        const value = this.getItemValue(item);\n        const label = this.stringifyItem(item);\n        const disabled = this.getItemDisabled(item);\n        const itemString = [value, label, disabled].filter(Boolean).join(\":\");\n        result += itemString + \",\";\n      }\n      return result;\n    });\n    __publicField(this, \"toJSON\", () => {\n      return {\n        size: this.size,\n        first: this.firstValue,\n        last: this.lastValue\n      };\n    });\n    this.items = [...options.items];\n  }\n  /**\n   * Returns the number of items in the collection\n   */\n  get size() {\n    return this.items.length;\n  }\n  /**\n   * Returns the first value in the collection\n   */\n  get firstValue() {\n    let index = 0;\n    while (this.getItemDisabled(this.at(index))) index++;\n    return this.getItemValue(this.at(index));\n  }\n  /**\n   * Returns the last value in the collection\n   */\n  get lastValue() {\n    let index = this.size - 1;\n    while (this.getItemDisabled(this.at(index))) index--;\n    return this.getItemValue(this.at(index));\n  }\n  *[Symbol.iterator]() {\n    yield* this.items;\n  }\n};\nvar match = (label, query) => {\n  return !!label?.toLowerCase().startsWith(query.toLowerCase());\n};\nvar wrap = (v, idx) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length]);\n};\nfunction isListCollection(v) {\n  return v instanceof ListCollection;\n}\nfunction insert(items, index, ...values) {\n  return [...items.slice(0, index), ...values, ...items.slice(index)];\n}\nfunction move(items, indices, toIndex) {\n  indices = [...indices].sort((a, b) => a - b);\n  const itemsToMove = indices.map((i) => items[i]);\n  for (let i = indices.length - 1; i >= 0; i--) {\n    items = [...items.slice(0, indices[i]), ...items.slice(indices[i] + 1)];\n  }\n  toIndex = Math.max(0, toIndex - indices.filter((i) => i < toIndex).length);\n  return [...items.slice(0, toIndex), ...itemsToMove, ...items.slice(toIndex)];\n}\n\n// src/grid-collection.ts\nvar GridCollection = class extends ListCollection {\n  constructor(options) {\n    const { columnCount } = options;\n    super(options);\n    __publicField(this, \"columnCount\");\n    /**\n     * Returns the row data in the grid\n     */\n    __publicField(this, \"getRows\", () => {\n      return chunk([...this.items], this.columnCount);\n    });\n    /**\n     * Returns the number of rows in the grid\n     */\n    __publicField(this, \"getRowCount\", () => {\n      return this.getRows().length;\n    });\n    /**\n     * Returns the index of the specified row and column in the grid\n     */\n    __publicField(this, \"getCellIndex\", (row, column) => {\n      return row * this.columnCount + column;\n    });\n    /**\n     * Returns the item at the specified row and column in the grid\n     */\n    __publicField(this, \"getCell\", (row, column) => {\n      return this.at(this.getCellIndex(row, column));\n    });\n    /**\n     * Returns the row and column index for a given value\n     */\n    __publicField(this, \"getValueCell\", (value) => {\n      const index = this.indexOf(value);\n      if (index === -1) return null;\n      const row = Math.floor(index / this.columnCount);\n      const column = index % this.columnCount;\n      return { row, column };\n    });\n    /**\n     * Returns the value of the last enabled column in a row\n     */\n    __publicField(this, \"getLastEnabledColumnIndex\", (row) => {\n      for (let col = this.columnCount - 1; col >= 0; col--) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the index of the first enabled column in a row\n     */\n    __publicField(this, \"getFirstEnabledColumnIndex\", (row) => {\n      for (let col = 0; col < this.columnCount; col++) {\n        const cell = this.getCell(row, col);\n        if (cell && !this.getItemDisabled(cell)) {\n          return col;\n        }\n      }\n      return null;\n    });\n    /**\n     * Returns the value of the previous row in the grid, based on the current value\n     */\n    __publicField(this, \"getPreviousRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let prevRowIndex = currentCell.row;\n      let prevColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        prevRowIndex = prevIndex(rows, prevRowIndex, { loop });\n        const prevRow = rows[prevRowIndex];\n        if (!prevRow) continue;\n        const prevCell = prevRow[prevColumnIndex];\n        if (!prevCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(prevRowIndex);\n          if (lastColumnIndex != null) {\n            prevColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(prevRowIndex, prevColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.firstValue;\n    });\n    /**\n     * Returns the value of the next row in the grid, based on the current value\n     */\n    __publicField(this, \"getNextRowValue\", (value, loop = false) => {\n      const currentCell = this.getValueCell(value);\n      if (currentCell === null) return null;\n      const rows = this.getRows();\n      const rowCount = this.getRowCount();\n      let nextRowIndex = currentCell.row;\n      let nextColumnIndex = currentCell.column;\n      for (let i = 1; i <= rowCount; i++) {\n        nextRowIndex = nextIndex(rows, nextRowIndex, { loop });\n        const nextRow = rows[nextRowIndex];\n        if (!nextRow) continue;\n        const nextCell = nextRow[nextColumnIndex];\n        if (!nextCell) {\n          const lastColumnIndex = this.getLastEnabledColumnIndex(nextRowIndex);\n          if (lastColumnIndex != null) {\n            nextColumnIndex = lastColumnIndex;\n          }\n        }\n        const cell = this.getCell(nextRowIndex, nextColumnIndex);\n        if (!this.getItemDisabled(cell)) {\n          return this.getItemValue(cell);\n        }\n      }\n      return this.lastValue;\n    });\n    this.columnCount = columnCount;\n  }\n};\nfunction isGridCollection(v) {\n  return v instanceof GridCollection;\n}\n\n// src/tree-visit.ts\nfunction access(node, indexPath, options) {\n  for (let i = 0; i < indexPath.length; i++) node = options.getChildren(node, indexPath.slice(i + 1))[indexPath[i]];\n  return node;\n}\nfunction ancestorIndexPaths(indexPaths) {\n  const sortedPaths = sortIndexPaths(indexPaths);\n  const result = [];\n  const seen = /* @__PURE__ */ new Set();\n  for (const indexPath of sortedPaths) {\n    const key = indexPath.join();\n    if (!seen.has(key)) {\n      seen.add(key);\n      result.push(indexPath);\n    }\n  }\n  return result;\n}\nfunction compareIndexPaths(a, b) {\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    if (a[i] < b[i]) return -1;\n    if (a[i] > b[i]) return 1;\n  }\n  return a.length - b.length;\n}\nfunction sortIndexPaths(indexPaths) {\n  return indexPaths.sort(compareIndexPaths);\n}\nfunction find(node, options) {\n  let found;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = child;\n        return \"stop\";\n      }\n    }\n  });\n  return found;\n}\nfunction findIndexPath(node, options) {\n  let found;\n  visit(node, {\n    onEnter: (child, indexPath) => {\n      if (options.predicate(child, indexPath)) {\n        found = [...indexPath];\n        return \"stop\";\n      }\n    },\n    getChildren: options.getChildren\n  });\n  return found;\n}\nfunction reduce(node, options) {\n  let result = options.initialResult;\n  visit(node, {\n    ...options,\n    onEnter: (child, indexPath) => {\n      result = options.nextResult(result, child, indexPath);\n    }\n  });\n  return result;\n}\nfunction flatMap(node, options) {\n  return reduce(node, {\n    ...options,\n    initialResult: [],\n    nextResult: (result, child, indexPath) => {\n      result.push(...options.transform(child, indexPath));\n      return result;\n    }\n  });\n}\nfunction insertOperation(index, nodes) {\n  return { type: \"insert\", index, nodes };\n}\nfunction removeOperation(indexes) {\n  return { type: \"remove\", indexes };\n}\nfunction replaceOperation() {\n  return { type: \"replace\" };\n}\nfunction splitIndexPath(indexPath) {\n  return [indexPath.slice(0, -1), indexPath[indexPath.length - 1]];\n}\nfunction getInsertionOperations(indexPath, nodes, operations = /* @__PURE__ */ new Map()) {\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    switch (operations.get(parentKey)?.type) {\n      case \"remove\":\n        continue;\n    }\n    operations.set(parentKey, replaceOperation());\n  }\n  const operation = operations.get(parentIndexPath.join());\n  switch (operation?.type) {\n    case \"remove\":\n      operations.set(parentIndexPath.join(), {\n        type: \"removeThenInsert\",\n        removeIndexes: operation.indexes,\n        insertIndex: index,\n        insertNodes: nodes\n      });\n      break;\n    default:\n      operations.set(parentIndexPath.join(), insertOperation(index, nodes));\n  }\n  return operations;\n}\nfunction getRemovalOperations(indexPaths) {\n  const operations = /* @__PURE__ */ new Map();\n  const indexesToRemove = /* @__PURE__ */ new Map();\n  for (const indexPath of indexPaths) {\n    const parentKey = indexPath.slice(0, -1).join();\n    const value = indexesToRemove.get(parentKey) ?? [];\n    value.push(indexPath[indexPath.length - 1]);\n    indexesToRemove.set(\n      parentKey,\n      value.sort((a, b) => a - b)\n    );\n  }\n  for (const indexPath of indexPaths) {\n    for (let i = indexPath.length - 2; i >= 0; i--) {\n      const parentKey = indexPath.slice(0, i).join();\n      if (!operations.has(parentKey)) {\n        operations.set(parentKey, replaceOperation());\n      }\n    }\n  }\n  for (const [parentKey, indexes] of indexesToRemove) {\n    operations.set(parentKey, removeOperation(indexes));\n  }\n  return operations;\n}\nfunction getReplaceOperations(indexPath, node) {\n  const operations = /* @__PURE__ */ new Map();\n  const [parentIndexPath, index] = splitIndexPath(indexPath);\n  for (let i = parentIndexPath.length - 1; i >= 0; i--) {\n    const parentKey = parentIndexPath.slice(0, i).join();\n    operations.set(parentKey, replaceOperation());\n  }\n  operations.set(parentIndexPath.join(), {\n    type: \"removeThenInsert\",\n    removeIndexes: [index],\n    insertIndex: index,\n    insertNodes: [node]\n  });\n  return operations;\n}\nfunction mutate(node, operations, options) {\n  return map(node, {\n    ...options,\n    getChildren: (node2, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"replace\":\n        case \"remove\":\n        case \"removeThenInsert\":\n        case \"insert\":\n          return options.getChildren(node2, indexPath);\n        default:\n          return [];\n      }\n    },\n    transform: (node2, children, indexPath) => {\n      const key = indexPath.join();\n      const operation = operations.get(key);\n      switch (operation?.type) {\n        case \"remove\":\n          return options.create(\n            node2,\n            children.filter((_, index) => !operation.indexes.includes(index)),\n            indexPath\n          );\n        case \"removeThenInsert\":\n          const updatedChildren = children.filter((_, index) => !operation.removeIndexes.includes(index));\n          const adjustedIndex = operation.removeIndexes.reduce(\n            (index, removedIndex) => removedIndex < index ? index - 1 : index,\n            operation.insertIndex\n          );\n          return options.create(node2, splice(updatedChildren, adjustedIndex, 0, ...operation.insertNodes), indexPath);\n        case \"insert\":\n          return options.create(node2, splice(children, operation.index, 0, ...operation.nodes), indexPath);\n        case \"replace\":\n          return options.create(node2, children, indexPath);\n        default:\n          return node2;\n      }\n    }\n  });\n}\nfunction splice(array, start, deleteCount, ...items) {\n  return [...array.slice(0, start), ...items, ...array.slice(start + deleteCount)];\n}\nfunction map(node, options) {\n  const childrenMap = {};\n  visit(node, {\n    ...options,\n    onLeave: (child, indexPath) => {\n      const keyIndexPath = [0, ...indexPath];\n      const key = keyIndexPath.join();\n      const transformed = options.transform(child, childrenMap[key] ?? [], indexPath);\n      const parentKey = keyIndexPath.slice(0, -1).join();\n      const parentChildren = childrenMap[parentKey] ?? [];\n      parentChildren.push(transformed);\n      childrenMap[parentKey] = parentChildren;\n    }\n  });\n  return childrenMap[\"\"][0];\n}\nfunction insert2(node, options) {\n  const { nodes, at } = options;\n  if (at.length === 0) throw new Error(`Can't insert nodes at the root`);\n  const state = getInsertionOperations(at, nodes);\n  return mutate(node, state, options);\n}\nfunction replace(node, options) {\n  if (options.at.length === 0) return options.node;\n  const operations = getReplaceOperations(options.at, options.node);\n  return mutate(node, operations, options);\n}\nfunction remove(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't remove the root node`);\n  }\n  const operations = getRemovalOperations(options.indexPaths);\n  return mutate(node, operations, options);\n}\nfunction move2(node, options) {\n  if (options.indexPaths.length === 0) return node;\n  for (const indexPath of options.indexPaths) {\n    if (indexPath.length === 0) throw new Error(`Can't move the root node`);\n  }\n  if (options.to.length === 0) throw new Error(`Can't move nodes to the root`);\n  const _ancestorIndexPaths = ancestorIndexPaths(options.indexPaths);\n  const nodesToInsert = _ancestorIndexPaths.map((indexPath) => access(node, indexPath, options));\n  const operations = getInsertionOperations(options.to, nodesToInsert, getRemovalOperations(_ancestorIndexPaths));\n  return mutate(node, operations, options);\n}\nfunction visit(node, options) {\n  const { onEnter, onLeave, getChildren } = options;\n  let indexPath = [];\n  let stack = [{ node }];\n  const getIndexPath = options.reuseIndexPath ? () => indexPath : () => indexPath.slice();\n  while (stack.length > 0) {\n    let wrapper = stack[stack.length - 1];\n    if (wrapper.state === void 0) {\n      const enterResult = onEnter?.(wrapper.node, getIndexPath());\n      if (enterResult === \"stop\") return;\n      wrapper.state = enterResult === \"skip\" ? -1 : 0;\n    }\n    const children = wrapper.children || getChildren(wrapper.node, getIndexPath());\n    wrapper.children || (wrapper.children = children);\n    if (wrapper.state !== -1) {\n      if (wrapper.state < children.length) {\n        let currentIndex = wrapper.state;\n        indexPath.push(currentIndex);\n        stack.push({ node: children[currentIndex] });\n        wrapper.state = currentIndex + 1;\n        continue;\n      }\n      const leaveResult = onLeave?.(wrapper.node, getIndexPath());\n      if (leaveResult === \"stop\") return;\n    }\n    indexPath.pop();\n    stack.pop();\n  }\n}\n\n// src/tree-collection.ts\nvar TreeCollection = class {\n  constructor(options) {\n    this.options = options;\n    __publicField(this, \"rootNode\");\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(this.rootNode, other.rootNode);\n    });\n    __publicField(this, \"getNodeChildren\", (node) => {\n      return this.options.nodeToChildren?.(node) ?? fallback2.nodeToChildren(node) ?? [];\n    });\n    __publicField(this, \"getNodeValue\", (node) => {\n      return this.options.nodeToValue?.(node) ?? fallback2.nodeToValue(node);\n    });\n    __publicField(this, \"getNodeDisabled\", (node) => {\n      return this.options.isNodeDisabled?.(node) ?? fallback2.isNodeDisabled(node);\n    });\n    __publicField(this, \"stringify\", (value) => {\n      const node = this.findNode(value);\n      if (!node) return null;\n      return this.stringifyNode(node);\n    });\n    __publicField(this, \"stringifyNode\", (node) => {\n      return this.options.nodeToString?.(node) ?? fallback2.nodeToString(node);\n    });\n    __publicField(this, \"getFirstNode\", (rootNode = this.rootNode) => {\n      let firstChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (!firstChild && indexPath.length > 0 && !this.getNodeDisabled(node)) {\n            firstChild = node;\n            return \"stop\";\n          }\n        }\n      });\n      return firstChild;\n    });\n    __publicField(this, \"getLastNode\", (rootNode = this.rootNode, opts = {}) => {\n      let lastChild;\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) return \"skip\";\n          if (indexPath.length > 1) return \"skip\";\n          if (!this.getNodeDisabled(node)) {\n            lastChild = node;\n          }\n        }\n      });\n      return lastChild;\n    });\n    __publicField(this, \"at\", (indexPath) => {\n      return access(this.rootNode, indexPath, {\n        getChildren: this.getNodeChildren\n      });\n    });\n    __publicField(this, \"findNode\", (value, rootNode = this.rootNode) => {\n      return find(rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"sort\", (values) => {\n      return values.reduce(\n        (acc, value) => {\n          const indexPath = this.getIndexPath(value);\n          if (indexPath != null) acc.push({ value, indexPath });\n          return acc;\n        },\n        []\n      ).sort((a, b) => compareIndexPaths(a.indexPath, b.indexPath)).map(({ value }) => value);\n    });\n    __publicField(this, \"getIndexPath\", (value) => {\n      return findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n    });\n    __publicField(this, \"getValue\", (indexPath) => {\n      const node = this.at(indexPath);\n      return node ? this.getNodeValue(node) : void 0;\n    });\n    __publicField(this, \"getValuePath\", (indexPath) => {\n      if (!indexPath) return [];\n      const valuePath = [];\n      let currentPath = [...indexPath];\n      while (currentPath.length > 0) {\n        const node = this.at(currentPath);\n        if (node) valuePath.unshift(this.getNodeValue(node));\n        currentPath.pop();\n      }\n      return valuePath;\n    });\n    __publicField(this, \"getDepth\", (value) => {\n      const indexPath = findIndexPath(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        predicate: (node) => this.getNodeValue(node) === value\n      });\n      return indexPath?.length ?? 0;\n    });\n    __publicField(this, \"isRootNode\", (node) => {\n      return this.getNodeValue(node) === this.getNodeValue(this.rootNode);\n    });\n    __publicField(this, \"contains\", (parentIndexPath, valueIndexPath) => {\n      if (!parentIndexPath || !valueIndexPath) return false;\n      return valueIndexPath.slice(0, parentIndexPath.length).every((_, i) => parentIndexPath[i] === valueIndexPath[i]);\n    });\n    __publicField(this, \"getNextNode\", (value, opts = {}) => {\n      let found = false;\n      let nextNode;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) {\n            if (nodeValue === value) {\n              found = true;\n            }\n            return \"skip\";\n          }\n          if (found && !this.getNodeDisabled(node)) {\n            nextNode = node;\n            return \"stop\";\n          }\n          if (nodeValue === value) {\n            found = true;\n          }\n        }\n      });\n      return nextNode;\n    });\n    __publicField(this, \"getPreviousNode\", (value, opts = {}) => {\n      let previousNode;\n      let found = false;\n      visit(this.rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) {\n            return \"skip\";\n          }\n          if (nodeValue === value) {\n            found = true;\n            return \"stop\";\n          }\n          if (!this.getNodeDisabled(node)) {\n            previousNode = node;\n          }\n        }\n      });\n      return found ? previousNode : void 0;\n    });\n    __publicField(this, \"getParentNodes\", (values) => {\n      const result = [];\n      let indexPath = this.getIndexPath(values);\n      while (indexPath && indexPath.length > 0) {\n        indexPath.pop();\n        const parentNode = this.at(indexPath);\n        if (parentNode && !this.isRootNode(parentNode)) {\n          result.unshift(parentNode);\n        }\n      }\n      return result;\n    });\n    __publicField(this, \"getParentIndexPath\", (indexPath) => {\n      return indexPath.slice(0, -1);\n    });\n    __publicField(this, \"getParentNode\", (valueOrIndexPath) => {\n      const indexPath = typeof valueOrIndexPath === \"string\" ? this.getIndexPath(valueOrIndexPath) : valueOrIndexPath;\n      return indexPath ? this.at(this.getParentIndexPath(indexPath)) : void 0;\n    });\n    __publicField(this, \"visit\", (opts) => {\n      const { skip, ...rest } = opts;\n      visit(this.rootNode, {\n        ...rest,\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          if (this.isRootNode(node)) return;\n          if (skip?.({ value: this.getNodeValue(node), node, indexPath })) return \"skip\";\n          return rest.onEnter?.(node, indexPath);\n        }\n      });\n    });\n    __publicField(this, \"getPreviousSibling\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = siblings.findIndex((sibling) => this.getValue(indexPath) === this.getNodeValue(sibling));\n      while (--idx >= 0) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getNextSibling\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const siblings = this.getNodeChildren(parentNode);\n      let idx = siblings.findIndex((sibling) => this.getValue(indexPath) === this.getNodeValue(sibling));\n      while (++idx < siblings.length) {\n        const sibling = siblings[idx];\n        if (!this.getNodeDisabled(sibling)) return sibling;\n      }\n      return;\n    });\n    __publicField(this, \"getSiblingNodes\", (indexPath) => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this.getNodeChildren(parentNode) : [];\n    });\n    __publicField(this, \"getValues\", (rootNode = this.rootNode) => {\n      const values = flatMap(rootNode, {\n        getChildren: this.getNodeChildren,\n        transform: (node) => [this.getNodeValue(node)]\n      });\n      return values.slice(1);\n    });\n    __publicField(this, \"isSameDepth\", (indexPath, depth) => {\n      if (depth == null) return true;\n      return indexPath.length === depth;\n    });\n    __publicField(this, \"isBranchNode\", (node) => {\n      return this.getNodeChildren(node).length > 0;\n    });\n    __publicField(this, \"getBranchValues\", (rootNode = this.rootNode, opts = {}) => {\n      let values = [];\n      visit(rootNode, {\n        getChildren: this.getNodeChildren,\n        onEnter: (node, indexPath) => {\n          const nodeValue = this.getNodeValue(node);\n          if (opts.skip?.({ value: nodeValue, node, indexPath })) return \"skip\";\n          if (this.getNodeChildren(node).length > 0 && this.isSameDepth(indexPath, opts.depth)) {\n            values.push(this.getNodeValue(node));\n          }\n        }\n      });\n      return values.slice(1);\n    });\n    __publicField(this, \"flatten\", (rootNode = this.rootNode) => {\n      const nodes = flatMap(rootNode, {\n        getChildren: this.getNodeChildren,\n        transform: (node, indexPath) => {\n          const children = this.getNodeChildren(node).map((child) => this.getNodeValue(child));\n          return [\n            compact({\n              label: this.stringifyNode(node),\n              value: this.getNodeValue(node),\n              indexPath,\n              children: children.length > 0 ? children : void 0\n            })\n          ];\n        }\n      });\n      return nodes.slice(1);\n    });\n    __publicField(this, \"_create\", (node, children) => {\n      return compact({ ...node, children });\n    });\n    __publicField(this, \"_insert\", (rootNode, indexPath, nodes) => {\n      return insert2(rootNode, { at: indexPath, nodes, getChildren: this.getNodeChildren, create: this._create });\n    });\n    __publicField(this, \"_replace\", (rootNode, indexPath, node) => {\n      return replace(rootNode, { at: indexPath, node, getChildren: this.getNodeChildren, create: this._create });\n    });\n    __publicField(this, \"_move\", (rootNode, indexPaths, to) => {\n      return move2(rootNode, { indexPaths, to, getChildren: this.getNodeChildren, create: this._create });\n    });\n    __publicField(this, \"_remove\", (rootNode, indexPaths) => {\n      return remove(rootNode, { indexPaths, getChildren: this.getNodeChildren, create: this._create });\n    });\n    __publicField(this, \"replace\", (indexPath, node) => {\n      return this._replace(this.rootNode, indexPath, node);\n    });\n    __publicField(this, \"remove\", (indexPaths) => {\n      return this._remove(this.rootNode, indexPaths);\n    });\n    __publicField(this, \"insertBefore\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      return parentNode ? this._insert(this.rootNode, indexPath, nodes) : void 0;\n    });\n    __publicField(this, \"insertAfter\", (indexPath, nodes) => {\n      const parentNode = this.getParentNode(indexPath);\n      if (!parentNode) return;\n      const nextIndex2 = [...indexPath.slice(0, -1), indexPath[indexPath.length - 1] + 1];\n      return this._insert(this.rootNode, nextIndex2, nodes);\n    });\n    __publicField(this, \"move\", (fromIndexPaths, toIndexPath) => {\n      return this._move(this.rootNode, fromIndexPaths, toIndexPath);\n    });\n    __publicField(this, \"toJSON\", () => {\n      return this.getValues(this.rootNode);\n    });\n    this.rootNode = options.rootNode;\n  }\n};\nfunction flattenedToTree(nodes) {\n  let rootNode = {\n    value: \"ROOT\"\n  };\n  nodes.map((node) => {\n    const { indexPath, label, value } = node;\n    if (!indexPath.length) {\n      Object.assign(rootNode, { label, value, children: [] });\n      return;\n    }\n    rootNode = insert2(rootNode, {\n      at: indexPath,\n      nodes: [compact({ label, value })],\n      getChildren: (node2) => node2.children ?? [],\n      create: (node2, children) => {\n        return compact({ ...node2, children });\n      }\n    });\n  });\n  return new TreeCollection({ rootNode });\n}\nfunction filePathToTree(paths) {\n  const rootNode = {\n    label: \"\",\n    value: \"ROOT\",\n    children: []\n  };\n  paths.forEach((path) => {\n    const parts = path.split(\"/\");\n    let currentNode = rootNode;\n    parts.forEach((part) => {\n      let childNode = currentNode.children?.find((child) => child.label === part);\n      if (!childNode) {\n        childNode = {\n          value: parts.slice(0, parts.indexOf(part) + 1).join(\"/\"),\n          label: part\n        };\n        currentNode.children || (currentNode.children = []);\n        currentNode.children.push(childNode);\n      }\n      currentNode = childNode;\n    });\n  });\n  return new TreeCollection({ rootNode });\n}\nvar fallback2 = {\n  nodeToValue(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"value\")) return node.value;\n    return \"\";\n  },\n  nodeToString(node) {\n    if (typeof node === \"string\") return node;\n    if (isObject(node) && hasProp(node, \"label\")) return node.label;\n    return fallback2.nodeToValue(node);\n  },\n  isNodeDisabled(node) {\n    if (isObject(node) && hasProp(node, \"disabled\")) return !!node.disabled;\n    return false;\n  },\n  nodeToChildren(node) {\n    return node.children;\n  }\n};\nvar Selection = class _Selection extends Set {\n  constructor(values = []) {\n    super(values);\n    __publicField(this, \"selectionMode\", \"single\");\n    __publicField(this, \"deselectable\", true);\n    __publicField(this, \"copy\", () => {\n      const clone = new _Selection([...this]);\n      return this.sync(clone);\n    });\n    __publicField(this, \"sync\", (other) => {\n      other.selectionMode = this.selectionMode;\n      other.deselectable = this.deselectable;\n      return other;\n    });\n    __publicField(this, \"isEmpty\", () => {\n      return this.size === 0;\n    });\n    __publicField(this, \"isSelected\", (value) => {\n      if (this.selectionMode === \"none\" || value == null) {\n        return false;\n      }\n      return this.has(value);\n    });\n    __publicField(this, \"canSelect\", (collection, value) => {\n      return this.selectionMode !== \"none\" || !collection.getItemDisabled(collection.find(value));\n    });\n    __publicField(this, \"firstSelectedValue\", (collection) => {\n      let firstValue = null;\n      for (let value of this) {\n        if (!firstValue || collection.compareValue(value, firstValue) < 0) {\n          firstValue = value;\n        }\n      }\n      return firstValue;\n    });\n    __publicField(this, \"lastSelectedValue\", (collection) => {\n      let lastValue = null;\n      for (let value of this) {\n        if (!lastValue || collection.compareValue(value, lastValue) > 0) {\n          lastValue = value;\n        }\n      }\n      return lastValue;\n    });\n    __publicField(this, \"extendSelection\", (collection, anchorValue, targetValue) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        return this.replaceSelection(collection, targetValue);\n      }\n      const selection = this.copy();\n      const lastSelected = Array.from(this).pop();\n      for (let key of collection.getValueRange(anchorValue, lastSelected ?? targetValue)) {\n        selection.delete(key);\n      }\n      for (let key of collection.getValueRange(targetValue, anchorValue)) {\n        if (this.canSelect(collection, key)) {\n          selection.add(key);\n        }\n      }\n      return selection;\n    });\n    __publicField(this, \"toggleSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\" && !this.isSelected(value)) {\n        return this.replaceSelection(collection, value);\n      }\n      const selection = this.copy();\n      if (selection.has(value)) {\n        selection.delete(value);\n      } else if (selection.canSelect(collection, value)) {\n        selection.add(value);\n      }\n      return selection;\n    });\n    __publicField(this, \"replaceSelection\", (collection, value) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (value == null) {\n        return this;\n      }\n      if (!this.canSelect(collection, value)) {\n        return this;\n      }\n      const selection = new _Selection([value]);\n      return this.sync(selection);\n    });\n    __publicField(this, \"setSelection\", (values) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      let selection = new _Selection();\n      for (let value of values) {\n        if (value != null) {\n          selection.add(value);\n          if (this.selectionMode === \"single\") {\n            break;\n          }\n        }\n      }\n      return this.sync(selection);\n    });\n    __publicField(this, \"clearSelection\", () => {\n      const selection = this.copy();\n      if (selection.deselectable && selection.size > 0) {\n        selection.clear();\n      }\n      return selection;\n    });\n    __publicField(this, \"select\", (collection, value, forceToggle) => {\n      if (this.selectionMode === \"none\") {\n        return this;\n      }\n      if (this.selectionMode === \"single\") {\n        if (this.isSelected(value) && this.deselectable) {\n          return this.toggleSelection(collection, value);\n        } else {\n          return this.replaceSelection(collection, value);\n        }\n      } else if (this.selectionMode === \"multiple\" || forceToggle) {\n        return this.toggleSelection(collection, value);\n      } else {\n        return this.replaceSelection(collection, value);\n      }\n    });\n    __publicField(this, \"deselect\", (value) => {\n      const selection = this.copy();\n      selection.delete(value);\n      return selection;\n    });\n    __publicField(this, \"isEqual\", (other) => {\n      return isEqual(Array.from(this), Array.from(other));\n    });\n  }\n};\n\nexport { GridCollection, ListCollection, Selection, TreeCollection, filePathToTree, flattenedToTree, isGridCollection, isListCollection };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,eAAe;AAEhG,IAAIC,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKD,GAAG,IAAID,GAAG,GAAGJ,SAAS,CAACI,GAAG,EAAEC,GAAG,EAAE;EAAEE,UAAU,EAAE,IAAI;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEH;AAAM,CAAC,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAC/J,IAAII,aAAa,GAAGA,CAACN,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKH,eAAe,CAACC,GAAG,EAAE,OAAOC,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,EAAE,GAAGA,GAAG,EAAEC,KAAK,CAAC;AAC9G,IAAIK,QAAQ,GAAG;EACbC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI;IACzC,IAAIf,QAAQ,CAACe,IAAI,CAAC,IAAId,OAAO,CAACc,IAAI,EAAE,OAAO,CAAC,EAAE,OAAOA,IAAI,CAACP,KAAK;IAC/D,OAAO,EAAE;EACX,CAAC;EACDQ,YAAYA,CAACD,IAAI,EAAE;IACjB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI;IACzC,IAAIf,QAAQ,CAACe,IAAI,CAAC,IAAId,OAAO,CAACc,IAAI,EAAE,OAAO,CAAC,EAAE,OAAOA,IAAI,CAACE,KAAK;IAC/D,OAAOJ,QAAQ,CAACC,WAAW,CAACC,IAAI,CAAC;EACnC,CAAC;EACDG,cAAcA,CAACH,IAAI,EAAE;IACnB,IAAIf,QAAQ,CAACe,IAAI,CAAC,IAAId,OAAO,CAACc,IAAI,EAAE,UAAU,CAAC,EAAE,OAAO,CAAC,CAACA,IAAI,CAACI,QAAQ;IACvE,OAAO,KAAK;EACd;AACF,CAAC;AACD,IAAIC,cAAc,GAAG,MAAMC,eAAe,CAAC;EACzCC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB;AACJ;AACA;IACIX,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC;IAC5BA,aAAa,CAAC,IAAI,EAAE,MAAM,EAAGY,KAAK,IAAK;MACrC,OAAO,IAAIH,eAAe,CAAC;QAAE,GAAG,IAAI,CAACE,OAAO;QAAEC,KAAK,EAAEA,KAAK,IAAI,CAAC,GAAG,IAAI,CAACA,KAAK;MAAE,CAAC,CAAC;IAClF,CAAC,CAAC;IACFZ,aAAa,CAAC,IAAI,EAAE,SAAS,EAAGa,KAAK,IAAK;MACxC,OAAO7B,OAAO,CAAC,IAAI,CAAC4B,KAAK,EAAEC,KAAK,CAACD,KAAK,CAAC;IACzC,CAAC,CAAC;IACF;AACJ;AACA;IACIZ,aAAa,CAAC,IAAI,EAAE,UAAU,EAAGY,KAAK,IAAK;MACzC,OAAO,IAAI,CAACE,IAAI,CAACF,KAAK,CAAC;IACzB,CAAC,CAAC;IACF;AACJ;AACA;IACIZ,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,CAACY,KAAK,GAAG,IAAI,CAACA,KAAK,KAAK;MACvD,OAAOG,KAAK,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,GAAG,CAAEd,IAAI,IAAK,IAAI,CAACe,YAAY,CAACf,IAAI,CAAC,CAAC,CAACgB,MAAM,CAACC,OAAO,CAAC;IACjF,CAAC,CAAC;IACF;AACJ;AACA;IACIpB,aAAa,CAAC,IAAI,EAAE,MAAM,EAAGJ,KAAK,IAAK;MACrC,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI;MAC9B,MAAMyB,KAAK,GAAG,IAAI,CAACT,KAAK,CAACU,SAAS,CAAEnB,IAAI,IAAK,IAAI,CAACe,YAAY,CAACf,IAAI,CAAC,KAAKP,KAAK,CAAC;MAC/E,OAAOyB,KAAK,IAAI,IAAI,GAAG,IAAI,CAACT,KAAK,CAACS,KAAK,CAAC,GAAG,IAAI;IACjD,CAAC,CAAC;IACF;AACJ;AACA;IACIrB,aAAa,CAAC,IAAI,EAAE,UAAU,EAAGuB,MAAM,IAAK;MAC1C,OAAOR,KAAK,CAACC,IAAI,CAACO,MAAM,CAAC,CAACN,GAAG,CAAErB,KAAK,IAAK,IAAI,CAAC4B,IAAI,CAAC5B,KAAK,CAAC,CAAC,CAACuB,MAAM,CAAEhB,IAAI,IAAKA,IAAI,IAAI,IAAI,CAAC;IAC3F,CAAC,CAAC;IACF;AACJ;AACA;IACIH,aAAa,CAAC,IAAI,EAAE,IAAI,EAAGqB,KAAK,IAAK;MACnC,OAAO,IAAI,CAACT,KAAK,CAACS,KAAK,CAAC,IAAI,IAAI;IAClC,CAAC,CAAC;IACFrB,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,CAACyB,MAAM,EAAEC,MAAM,KAAK;MAChD,MAAMC,MAAM,GAAG,IAAI,CAACC,OAAO,CAACH,MAAM,CAAC;MACnC,MAAMI,MAAM,GAAG,IAAI,CAACD,OAAO,CAACF,MAAM,CAAC;MACnC,OAAO,CAACC,MAAM,IAAI,CAAC,KAAKE,MAAM,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC;IACF;AACJ;AACA;IACI7B,aAAa,CAAC,IAAI,EAAE,MAAM,EAAGuB,MAAM,IAAK;MACtC,OAAO,CAAC,GAAGA,MAAM,CAAC,CAACO,IAAI,CAAC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC;IACF;AACJ;AACA;IACIhC,aAAa,CAAC,IAAI,EAAE,cAAc,EAAGG,IAAI,IAAK;MAC5C,IAAIA,IAAI,IAAI,IAAI,EAAE,OAAO,IAAI;MAC7B,OAAO,IAAI,CAACQ,OAAO,CAACT,WAAW,GAAGC,IAAI,CAAC,IAAIF,QAAQ,CAACC,WAAW,CAACC,IAAI,CAAC;IACvE,CAAC,CAAC;IACF;AACJ;AACA;IACIH,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAGG,IAAI,IAAK;MAC/C,IAAIA,IAAI,IAAI,IAAI,EAAE,OAAO,KAAK;MAC9B,OAAO,IAAI,CAACQ,OAAO,CAACL,cAAc,GAAGH,IAAI,CAAC,IAAIF,QAAQ,CAACK,cAAc,CAACH,IAAI,CAAC;IAC7E,CAAC,CAAC;IACF;AACJ;AACA;IACIH,aAAa,CAAC,IAAI,EAAE,eAAe,EAAGG,IAAI,IAAK;MAC7C,IAAIA,IAAI,IAAI,IAAI,EAAE,OAAO,IAAI;MAC7B,OAAO,IAAI,CAACQ,OAAO,CAACP,YAAY,GAAGD,IAAI,CAAC,IAAIF,QAAQ,CAACG,YAAY,CAACD,IAAI,CAAC;IACzE,CAAC,CAAC;IACF;AACJ;AACA;IACIH,aAAa,CAAC,IAAI,EAAE,WAAW,EAAGJ,KAAK,IAAK;MAC1C,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI;MAC9B,OAAO,IAAI,CAACqC,aAAa,CAAC,IAAI,CAACT,IAAI,CAAC5B,KAAK,CAAC,CAAC;IAC7C,CAAC,CAAC;IACF;AACJ;AACA;IACII,aAAa,CAAC,IAAI,EAAE,gBAAgB,EAAE,CAACY,KAAK,EAAEsB,SAAS,GAAG,IAAI,KAAK;MACjE,OAAOnB,KAAK,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,GAAG,CAAEd,IAAI,IAAK,IAAI,CAAC8B,aAAa,CAAC9B,IAAI,CAAC,CAAC,CAACgB,MAAM,CAACC,OAAO,CAAC,CAACe,IAAI,CAACD,SAAS,CAAC;IAClG,CAAC,CAAC;IACF;AACJ;AACA;IACIlC,aAAa,CAAC,IAAI,EAAE,eAAe,EAAE,CAACJ,KAAK,EAAEsC,SAAS,KAAK;MACzD,OAAO,IAAI,CAACE,cAAc,CAAC,IAAI,CAACC,QAAQ,CAACzC,KAAK,CAAC,EAAEsC,SAAS,CAAC;IAC7D,CAAC,CAAC;IACF;AACJ;AACA;IACIlC,aAAa,CAAC,IAAI,EAAE,KAAK,EAAGJ,KAAK,IAAK;MACpC,OAAO,IAAI,CAACgC,OAAO,CAAChC,KAAK,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC,CAAC;IACF;AACJ;AACA;IACII,aAAa,CAAC,IAAI,EAAE,SAAS,EAAGG,IAAI,IAAK;MACvC,IAAIA,IAAI,IAAI,IAAI,EAAE,OAAO,KAAK;MAC9B,OAAO,IAAI,CAACmC,GAAG,CAAC,IAAI,CAACpB,YAAY,CAACf,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC;IACF;AACJ;AACA;IACIH,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,CAACJ,KAAK,EAAE2C,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,KAAK,KAAK;MACtE,IAAInB,KAAK,GAAG,IAAI,CAACO,OAAO,CAAChC,KAAK,CAAC;MAC/B,IAAIyB,KAAK,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;MAC7BA,KAAK,GAAGmB,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACrB,KAAK,GAAGkB,IAAI,EAAE,IAAI,CAACI,IAAI,GAAG,CAAC,CAAC,GAAGtB,KAAK,GAAGkB,IAAI;MACpE,OAAOlB,KAAK,IAAI,IAAI,CAACsB,IAAI,IAAI,IAAI,CAACC,eAAe,CAAC,IAAI,CAACC,EAAE,CAACxB,KAAK,CAAC,CAAC,EAAEA,KAAK,EAAE;MAC1E,OAAO,IAAI,CAACH,YAAY,CAAC,IAAI,CAAC2B,EAAE,CAACxB,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC;IACF;AACJ;AACA;IACIrB,aAAa,CAAC,IAAI,EAAE,kBAAkB,EAAE,CAACJ,KAAK,EAAE2C,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,KAAK,KAAK;MAC1E,IAAInB,KAAK,GAAG,IAAI,CAACO,OAAO,CAAChC,KAAK,CAAC;MAC/B,IAAIyB,KAAK,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;MAC7BA,KAAK,GAAGmB,KAAK,GAAGC,IAAI,CAACK,GAAG,CAACzB,KAAK,GAAGkB,IAAI,EAAE,CAAC,CAAC,GAAGlB,KAAK,GAAGkB,IAAI;MACxD,OAAOlB,KAAK,IAAI,CAAC,IAAI,IAAI,CAACuB,eAAe,CAAC,IAAI,CAACC,EAAE,CAACxB,KAAK,CAAC,CAAC,EAAEA,KAAK,EAAE;MAClE,OAAO,IAAI,CAACH,YAAY,CAAC,IAAI,CAAC2B,EAAE,CAACxB,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC;IACF;AACJ;AACA;IACIrB,aAAa,CAAC,IAAI,EAAE,SAAS,EAAGJ,KAAK,IAAK;MACxC,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO,CAAC,CAAC;MAC5B,OAAO,IAAI,CAACgB,KAAK,CAACU,SAAS,CAAEnB,IAAI,IAAK,IAAI,CAACe,YAAY,CAACf,IAAI,CAAC,KAAKP,KAAK,CAAC;IAC1E,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC+C,IAAI,EAAEC,OAAO,KAAK;MAClD,IAAIpC,KAAK,GAAGoC,OAAO,IAAI,IAAI,GAAGC,IAAI,CAAC,IAAI,CAACrC,KAAK,EAAE,IAAI,CAACgB,OAAO,CAACoB,OAAO,CAAC,CAAC,GAAG,IAAI,CAACpC,KAAK;MAClF,MAAMsC,WAAW,GAAGH,IAAI,CAACI,MAAM,KAAK,CAAC;MACrC,IAAID,WAAW,EAAEtC,KAAK,GAAGA,KAAK,CAACO,MAAM,CAAEhB,IAAI,IAAK,IAAI,CAACe,YAAY,CAACf,IAAI,CAAC,KAAK6C,OAAO,CAAC;MACpF,OAAOpC,KAAK,CAACY,IAAI,CAAErB,IAAI,IAAKiD,KAAK,CAAC,IAAI,CAACnB,aAAa,CAAC9B,IAAI,CAAC,EAAE4C,IAAI,CAAC,CAAC;IACpE,CAAC,CAAC;IACF;AACJ;AACA;IACI/C,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,CAACqD,WAAW,EAAE1C,OAAO,KAAK;MACtD,MAAM;QAAE2C,KAAK;QAAEC,YAAY;QAAEC,OAAO,GAAG;MAAI,CAAC,GAAG7C,OAAO;MACtD,MAAM8C,MAAM,GAAGH,KAAK,CAACI,SAAS,GAAGL,WAAW;MAC5C,MAAMM,UAAU,GAAGF,MAAM,CAACN,MAAM,GAAG,CAAC,IAAIpC,KAAK,CAACC,IAAI,CAACyC,MAAM,CAAC,CAACG,KAAK,CAAEC,IAAI,IAAKA,IAAI,KAAKJ,MAAM,CAAC,CAAC,CAAC,CAAC;MAC9F,MAAMK,KAAK,GAAGH,UAAU,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM;MAC7C,MAAMtD,IAAI,GAAG,IAAI,CAAC4D,SAAS,CAACD,KAAK,EAAEP,YAAY,CAAC;MAChD,MAAM3D,KAAK,GAAG,IAAI,CAACsB,YAAY,CAACf,IAAI,CAAC;MACrC,SAAS6D,OAAOA,CAAA,EAAG;QACjBC,YAAY,CAACX,KAAK,CAACY,KAAK,CAAC;QACzBZ,KAAK,CAACY,KAAK,GAAG,CAAC,CAAC;MAClB;MACA,SAASC,MAAMA,CAACC,MAAM,EAAE;QACtBd,KAAK,CAACI,SAAS,GAAGU,MAAM;QACxBJ,OAAO,CAAC,CAAC;QACT,IAAII,MAAM,KAAK,EAAE,EAAE;UACjBd,KAAK,CAACY,KAAK,GAAG,CAACG,UAAU,CAAC,MAAM;YAC9BF,MAAM,CAAC,EAAE,CAAC;YACVH,OAAO,CAAC,CAAC;UACX,CAAC,EAAER,OAAO,CAAC;QACb;MACF;MACAW,MAAM,CAACV,MAAM,CAAC;MACd,OAAO7D,KAAK;IACd,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,CAACJ,KAAK,EAAEO,IAAI,KAAK;MAC7C,IAAIkB,KAAK,GAAG,IAAI,CAACT,KAAK,CAACU,SAAS,CAAEgD,KAAK,IAAK,IAAI,CAACpD,YAAY,CAACoD,KAAK,CAAC,KAAK1E,KAAK,CAAC;MAC/E,IAAIyB,KAAK,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;MAC7B,OAAO,IAAI,CAACP,IAAI,CAAC,CAAC,GAAG,IAAI,CAACF,KAAK,CAAC2D,KAAK,CAAC,CAAC,EAAElD,KAAK,CAAC,EAAElB,IAAI,EAAE,GAAG,IAAI,CAACS,KAAK,CAAC2D,KAAK,CAAClD,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IACzF,CAAC,CAAC;IACFrB,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,CAACqB,KAAK,EAAE,GAAGT,KAAK,KAAK;MACjD,OAAO,IAAI,CAACE,IAAI,CAAC0D,MAAM,CAAC,IAAI,CAAC5D,KAAK,EAAES,KAAK,EAAE,GAAGT,KAAK,CAAC,CAAC;IACvD,CAAC,CAAC;IACFZ,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,CAACJ,KAAK,EAAE,GAAGgB,KAAK,KAAK;MACvD,IAAI6D,OAAO,GAAG,IAAI,CAAC7C,OAAO,CAAChC,KAAK,CAAC;MACjC,IAAI6E,OAAO,KAAK,CAAC,CAAC,EAAE;QAClB,IAAI,IAAI,CAAC7D,KAAK,CAACuC,MAAM,KAAK,CAAC,EAAEsB,OAAO,GAAG,CAAC,CAAC,KACpC,OAAO,IAAI;MAClB;MACA,OAAO,IAAI,CAAC3D,IAAI,CAAC0D,MAAM,CAAC,IAAI,CAAC5D,KAAK,EAAE6D,OAAO,EAAE,GAAG7D,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC;IACFZ,aAAa,CAAC,IAAI,EAAE,aAAa,EAAE,CAACJ,KAAK,EAAE,GAAGgB,KAAK,KAAK;MACtD,IAAI6D,OAAO,GAAG,IAAI,CAAC7C,OAAO,CAAChC,KAAK,CAAC;MACjC,IAAI6E,OAAO,KAAK,CAAC,CAAC,EAAE;QAClB,IAAI,IAAI,CAAC7D,KAAK,CAACuC,MAAM,KAAK,CAAC,EAAEsB,OAAO,GAAG,CAAC,CAAC,KACpC,OAAO,IAAI;MAClB;MACA,OAAO,IAAI,CAAC3D,IAAI,CAAC0D,MAAM,CAAC,IAAI,CAAC5D,KAAK,EAAE6D,OAAO,GAAG,CAAC,EAAE,GAAG7D,KAAK,CAAC,CAAC;IAC7D,CAAC,CAAC;IACFZ,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC,GAAGY,KAAK,KAAK;MAC3C,OAAO,IAAI,CAACE,IAAI,CAAC0D,MAAM,CAAC,IAAI,CAAC5D,KAAK,EAAE,CAAC,EAAE,GAAGA,KAAK,CAAC,CAAC;IACnD,CAAC,CAAC;IACFZ,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,GAAGY,KAAK,KAAK;MAC1C,OAAO,IAAI,CAACE,IAAI,CAAC0D,MAAM,CAAC,IAAI,CAAC5D,KAAK,EAAE,IAAI,CAACA,KAAK,CAACuC,MAAM,EAAE,GAAGvC,KAAK,CAAC,CAAC;IACnE,CAAC,CAAC;IACFZ,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,GAAG0E,aAAa,KAAK;MAClD,MAAMnD,MAAM,GAAGmD,aAAa,CAACzD,GAAG,CAC7B0D,WAAW,IAAK,OAAOA,WAAW,KAAK,QAAQ,GAAGA,WAAW,GAAG,IAAI,CAACzD,YAAY,CAACyD,WAAW,CAChG,CAAC;MACD,OAAO,IAAI,CAAC7D,IAAI,CACd,IAAI,CAACF,KAAK,CAACO,MAAM,CAAEhB,IAAI,IAAK;QAC1B,MAAMP,KAAK,GAAG,IAAI,CAACsB,YAAY,CAACf,IAAI,CAAC;QACrC,IAAIP,KAAK,IAAI,IAAI,EAAE,OAAO,KAAK;QAC/B,OAAO,CAAC2B,MAAM,CAACqD,QAAQ,CAAChF,KAAK,CAAC;MAChC,CAAC,CACH,CAAC;IACH,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,CAACJ,KAAK,EAAE6E,OAAO,KAAK;MAC9C,MAAMI,SAAS,GAAG,IAAI,CAACjD,OAAO,CAAChC,KAAK,CAAC;MACrC,IAAIiF,SAAS,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;MACjC,OAAO,IAAI,CAAC/D,IAAI,CAACgE,IAAI,CAAC,IAAI,CAAClE,KAAK,EAAE,CAACiE,SAAS,CAAC,EAAEJ,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC;IACFzE,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC6E,SAAS,EAAEJ,OAAO,KAAK;MACrD,OAAO,IAAI,CAAC3D,IAAI,CAACgE,IAAI,CAAC,IAAI,CAAClE,KAAK,EAAE,CAACiE,SAAS,CAAC,EAAEJ,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC;IACFzE,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,CAAC+E,CAAC,EAAEC,CAAC,KAAK;MAC5C,MAAMrD,MAAM,GAAG,IAAI,CAACC,OAAO,CAACmD,CAAC,CAAC;MAC9B,MAAMlD,MAAM,GAAG,IAAI,CAACD,OAAO,CAACoD,CAAC,CAAC;MAC9B,IAAIrD,MAAM,GAAGE,MAAM,EAAE,OAAO,CAAC,CAAC;MAC9B,IAAIF,MAAM,GAAGE,MAAM,EAAE,OAAO,CAAC;MAC7B,OAAO,CAAC;IACV,CAAC,CAAC;IACF7B,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,CAACgB,IAAI,EAAEiE,EAAE,KAAK;MACzC,IAAIC,IAAI,GAAG,EAAE;MACb,IAAIvF,GAAG,GAAGqB,IAAI;MACd,OAAOrB,GAAG,IAAI,IAAI,EAAE;QAClB,IAAIQ,IAAI,GAAG,IAAI,CAACqB,IAAI,CAAC7B,GAAG,CAAC;QACzB,IAAIQ,IAAI,EAAE+E,IAAI,CAACC,IAAI,CAACxF,GAAG,CAAC;QACxB,IAAIA,GAAG,KAAKsF,EAAE,EAAE,OAAOC,IAAI;QAC3BvF,GAAG,GAAG,IAAI,CAACyF,YAAY,CAACzF,GAAG,CAAC;MAC9B;MACA,OAAO,EAAE;IACX,CAAC,CAAC;IACFK,aAAa,CAAC,IAAI,EAAE,eAAe,EAAE,CAACgB,IAAI,EAAEiE,EAAE,KAAK;MACjD,IAAIjE,IAAI,IAAIiE,EAAE,EAAE;QACd,IAAI,IAAI,CAACI,YAAY,CAACrE,IAAI,EAAEiE,EAAE,CAAC,IAAI,CAAC,EAAE;UACpC,OAAO,IAAI,CAACK,KAAK,CAACtE,IAAI,EAAEiE,EAAE,CAAC;QAC7B;QACA,OAAO,IAAI,CAACK,KAAK,CAACL,EAAE,EAAEjE,IAAI,CAAC;MAC7B;MACA,OAAO,EAAE;IACX,CAAC,CAAC;IACFhB,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM;MACpC,IAAIuF,MAAM,GAAG,EAAE;MACf,KAAK,MAAMpF,IAAI,IAAI,IAAI,CAACS,KAAK,EAAE;QAC7B,MAAMhB,KAAK,GAAG,IAAI,CAACsB,YAAY,CAACf,IAAI,CAAC;QACrC,MAAME,KAAK,GAAG,IAAI,CAAC4B,aAAa,CAAC9B,IAAI,CAAC;QACtC,MAAMI,QAAQ,GAAG,IAAI,CAACqC,eAAe,CAACzC,IAAI,CAAC;QAC3C,MAAMqF,UAAU,GAAG,CAAC5F,KAAK,EAAES,KAAK,EAAEE,QAAQ,CAAC,CAACY,MAAM,CAACC,OAAO,CAAC,CAACe,IAAI,CAAC,GAAG,CAAC;QACrEoD,MAAM,IAAIC,UAAU,GAAG,GAAG;MAC5B;MACA,OAAOD,MAAM;IACf,CAAC,CAAC;IACFvF,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM;MAClC,OAAO;QACL2C,IAAI,EAAE,IAAI,CAACA,IAAI;QACf8C,KAAK,EAAE,IAAI,CAACC,UAAU;QACtBC,IAAI,EAAE,IAAI,CAACC;MACb,CAAC;IACH,CAAC,CAAC;IACF,IAAI,CAAChF,KAAK,GAAG,CAAC,GAAGD,OAAO,CAACC,KAAK,CAAC;EACjC;EACA;AACF;AACA;EACE,IAAI+B,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC/B,KAAK,CAACuC,MAAM;EAC1B;EACA;AACF;AACA;EACE,IAAIuC,UAAUA,CAAA,EAAG;IACf,IAAIrE,KAAK,GAAG,CAAC;IACb,OAAO,IAAI,CAACuB,eAAe,CAAC,IAAI,CAACC,EAAE,CAACxB,KAAK,CAAC,CAAC,EAAEA,KAAK,EAAE;IACpD,OAAO,IAAI,CAACH,YAAY,CAAC,IAAI,CAAC2B,EAAE,CAACxB,KAAK,CAAC,CAAC;EAC1C;EACA;AACF;AACA;EACE,IAAIuE,SAASA,CAAA,EAAG;IACd,IAAIvE,KAAK,GAAG,IAAI,CAACsB,IAAI,GAAG,CAAC;IACzB,OAAO,IAAI,CAACC,eAAe,CAAC,IAAI,CAACC,EAAE,CAACxB,KAAK,CAAC,CAAC,EAAEA,KAAK,EAAE;IACpD,OAAO,IAAI,CAACH,YAAY,CAAC,IAAI,CAAC2B,EAAE,CAACxB,KAAK,CAAC,CAAC;EAC1C;EACA,EAAEwE,MAAM,CAACC,QAAQ,IAAI;IACnB,OAAO,IAAI,CAAClF,KAAK;EACnB;AACF,CAAC;AACD,IAAIwC,KAAK,GAAGA,CAAC/C,KAAK,EAAEyD,KAAK,KAAK;EAC5B,OAAO,CAAC,CAACzD,KAAK,EAAE0F,WAAW,CAAC,CAAC,CAACC,UAAU,CAAClC,KAAK,CAACiC,WAAW,CAAC,CAAC,CAAC;AAC/D,CAAC;AACD,IAAI9C,IAAI,GAAGA,CAACgD,CAAC,EAAEC,GAAG,KAAK;EACrB,OAAOD,CAAC,CAAChF,GAAG,CAAC,CAACkF,CAAC,EAAE9E,KAAK,KAAK4E,CAAC,CAAC,CAACxD,IAAI,CAACK,GAAG,CAACoD,GAAG,EAAE,CAAC,CAAC,GAAG7E,KAAK,IAAI4E,CAAC,CAAC9C,MAAM,CAAC,CAAC;AACtE,CAAC;AACD,SAASiD,gBAAgBA,CAACH,CAAC,EAAE;EAC3B,OAAOA,CAAC,YAAYzF,cAAc;AACpC;AACA,SAASgE,MAAMA,CAAC5D,KAAK,EAAES,KAAK,EAAE,GAAGE,MAAM,EAAE;EACvC,OAAO,CAAC,GAAGX,KAAK,CAAC2D,KAAK,CAAC,CAAC,EAAElD,KAAK,CAAC,EAAE,GAAGE,MAAM,EAAE,GAAGX,KAAK,CAAC2D,KAAK,CAAClD,KAAK,CAAC,CAAC;AACrE;AACA,SAASyD,IAAIA,CAAClE,KAAK,EAAEyF,OAAO,EAAE5B,OAAO,EAAE;EACrC4B,OAAO,GAAG,CAAC,GAAGA,OAAO,CAAC,CAACvE,IAAI,CAAC,CAACiD,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAC5C,MAAMsB,WAAW,GAAGD,OAAO,CAACpF,GAAG,CAAEsF,CAAC,IAAK3F,KAAK,CAAC2F,CAAC,CAAC,CAAC;EAChD,KAAK,IAAIA,CAAC,GAAGF,OAAO,CAAClD,MAAM,GAAG,CAAC,EAAEoD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C3F,KAAK,GAAG,CAAC,GAAGA,KAAK,CAAC2D,KAAK,CAAC,CAAC,EAAE8B,OAAO,CAACE,CAAC,CAAC,CAAC,EAAE,GAAG3F,KAAK,CAAC2D,KAAK,CAAC8B,OAAO,CAACE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACzE;EACA9B,OAAO,GAAGhC,IAAI,CAACK,GAAG,CAAC,CAAC,EAAE2B,OAAO,GAAG4B,OAAO,CAAClF,MAAM,CAAEoF,CAAC,IAAKA,CAAC,GAAG9B,OAAO,CAAC,CAACtB,MAAM,CAAC;EAC1E,OAAO,CAAC,GAAGvC,KAAK,CAAC2D,KAAK,CAAC,CAAC,EAAEE,OAAO,CAAC,EAAE,GAAG6B,WAAW,EAAE,GAAG1F,KAAK,CAAC2D,KAAK,CAACE,OAAO,CAAC,CAAC;AAC9E;;AAEA;AACA,IAAI+B,cAAc,GAAG,cAAchG,cAAc,CAAC;EAChDE,WAAWA,CAACC,OAAO,EAAE;IACnB,MAAM;MAAE8F;IAAY,CAAC,GAAG9F,OAAO;IAC/B,KAAK,CAACA,OAAO,CAAC;IACdX,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC;IAClC;AACJ;AACA;IACIA,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM;MACnC,OAAOf,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC2B,KAAK,CAAC,EAAE,IAAI,CAAC6F,WAAW,CAAC;IACjD,CAAC,CAAC;IACF;AACJ;AACA;IACIzG,aAAa,CAAC,IAAI,EAAE,aAAa,EAAE,MAAM;MACvC,OAAO,IAAI,CAAC0G,OAAO,CAAC,CAAC,CAACvD,MAAM;IAC9B,CAAC,CAAC;IACF;AACJ;AACA;IACInD,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,CAAC2G,GAAG,EAAEC,MAAM,KAAK;MACnD,OAAOD,GAAG,GAAG,IAAI,CAACF,WAAW,GAAGG,MAAM;IACxC,CAAC,CAAC;IACF;AACJ;AACA;IACI5G,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC2G,GAAG,EAAEC,MAAM,KAAK;MAC9C,OAAO,IAAI,CAAC/D,EAAE,CAAC,IAAI,CAACgE,YAAY,CAACF,GAAG,EAAEC,MAAM,CAAC,CAAC;IAChD,CAAC,CAAC;IACF;AACJ;AACA;IACI5G,aAAa,CAAC,IAAI,EAAE,cAAc,EAAGJ,KAAK,IAAK;MAC7C,MAAMyB,KAAK,GAAG,IAAI,CAACO,OAAO,CAAChC,KAAK,CAAC;MACjC,IAAIyB,KAAK,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;MAC7B,MAAMsF,GAAG,GAAGlE,IAAI,CAACqE,KAAK,CAACzF,KAAK,GAAG,IAAI,CAACoF,WAAW,CAAC;MAChD,MAAMG,MAAM,GAAGvF,KAAK,GAAG,IAAI,CAACoF,WAAW;MACvC,OAAO;QAAEE,GAAG;QAAEC;MAAO,CAAC;IACxB,CAAC,CAAC;IACF;AACJ;AACA;IACI5G,aAAa,CAAC,IAAI,EAAE,2BAA2B,EAAG2G,GAAG,IAAK;MACxD,KAAK,IAAII,GAAG,GAAG,IAAI,CAACN,WAAW,GAAG,CAAC,EAAEM,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACpD,MAAMC,IAAI,GAAG,IAAI,CAACC,OAAO,CAACN,GAAG,EAAEI,GAAG,CAAC;QACnC,IAAIC,IAAI,IAAI,CAAC,IAAI,CAACpE,eAAe,CAACoE,IAAI,CAAC,EAAE;UACvC,OAAOD,GAAG;QACZ;MACF;MACA,OAAO,IAAI;IACb,CAAC,CAAC;IACF;AACJ;AACA;IACI/G,aAAa,CAAC,IAAI,EAAE,4BAA4B,EAAG2G,GAAG,IAAK;MACzD,KAAK,IAAII,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,IAAI,CAACN,WAAW,EAAEM,GAAG,EAAE,EAAE;QAC/C,MAAMC,IAAI,GAAG,IAAI,CAACC,OAAO,CAACN,GAAG,EAAEI,GAAG,CAAC;QACnC,IAAIC,IAAI,IAAI,CAAC,IAAI,CAACpE,eAAe,CAACoE,IAAI,CAAC,EAAE;UACvC,OAAOD,GAAG;QACZ;MACF;MACA,OAAO,IAAI;IACb,CAAC,CAAC;IACF;AACJ;AACA;IACI/G,aAAa,CAAC,IAAI,EAAE,qBAAqB,EAAE,CAACJ,KAAK,EAAEsH,IAAI,GAAG,KAAK,KAAK;MAClE,MAAMC,WAAW,GAAG,IAAI,CAACC,YAAY,CAACxH,KAAK,CAAC;MAC5C,IAAIuH,WAAW,KAAK,IAAI,EAAE,OAAO,IAAI;MACrC,MAAME,IAAI,GAAG,IAAI,CAACX,OAAO,CAAC,CAAC;MAC3B,MAAMY,QAAQ,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;MACnC,IAAIC,YAAY,GAAGL,WAAW,CAACR,GAAG;MAClC,IAAIc,eAAe,GAAGN,WAAW,CAACP,MAAM;MACxC,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIe,QAAQ,EAAEf,CAAC,EAAE,EAAE;QAClCiB,YAAY,GAAGtI,SAAS,CAACmI,IAAI,EAAEG,YAAY,EAAE;UAAEN;QAAK,CAAC,CAAC;QACtD,MAAMQ,OAAO,GAAGL,IAAI,CAACG,YAAY,CAAC;QAClC,IAAI,CAACE,OAAO,EAAE;QACd,MAAMC,QAAQ,GAAGD,OAAO,CAACD,eAAe,CAAC;QACzC,IAAI,CAACE,QAAQ,EAAE;UACb,MAAMC,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAACL,YAAY,CAAC;UACpE,IAAII,eAAe,IAAI,IAAI,EAAE;YAC3BH,eAAe,GAAGG,eAAe;UACnC;QACF;QACA,MAAMZ,IAAI,GAAG,IAAI,CAACC,OAAO,CAACO,YAAY,EAAEC,eAAe,CAAC;QACxD,IAAI,CAAC,IAAI,CAAC7E,eAAe,CAACoE,IAAI,CAAC,EAAE;UAC/B,OAAO,IAAI,CAAC9F,YAAY,CAAC8F,IAAI,CAAC;QAChC;MACF;MACA,OAAO,IAAI,CAACtB,UAAU;IACxB,CAAC,CAAC;IACF;AACJ;AACA;IACI1F,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAE,CAACJ,KAAK,EAAEsH,IAAI,GAAG,KAAK,KAAK;MAC9D,MAAMC,WAAW,GAAG,IAAI,CAACC,YAAY,CAACxH,KAAK,CAAC;MAC5C,IAAIuH,WAAW,KAAK,IAAI,EAAE,OAAO,IAAI;MACrC,MAAME,IAAI,GAAG,IAAI,CAACX,OAAO,CAAC,CAAC;MAC3B,MAAMY,QAAQ,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;MACnC,IAAIO,YAAY,GAAGX,WAAW,CAACR,GAAG;MAClC,IAAIoB,eAAe,GAAGZ,WAAW,CAACP,MAAM;MACxC,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIe,QAAQ,EAAEf,CAAC,EAAE,EAAE;QAClCuB,YAAY,GAAG3I,SAAS,CAACkI,IAAI,EAAES,YAAY,EAAE;UAAEZ;QAAK,CAAC,CAAC;QACtD,MAAMc,OAAO,GAAGX,IAAI,CAACS,YAAY,CAAC;QAClC,IAAI,CAACE,OAAO,EAAE;QACd,MAAMC,QAAQ,GAAGD,OAAO,CAACD,eAAe,CAAC;QACzC,IAAI,CAACE,QAAQ,EAAE;UACb,MAAML,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAACC,YAAY,CAAC;UACpE,IAAIF,eAAe,IAAI,IAAI,EAAE;YAC3BG,eAAe,GAAGH,eAAe;UACnC;QACF;QACA,MAAMZ,IAAI,GAAG,IAAI,CAACC,OAAO,CAACa,YAAY,EAAEC,eAAe,CAAC;QACxD,IAAI,CAAC,IAAI,CAACnF,eAAe,CAACoE,IAAI,CAAC,EAAE;UAC/B,OAAO,IAAI,CAAC9F,YAAY,CAAC8F,IAAI,CAAC;QAChC;MACF;MACA,OAAO,IAAI,CAACpB,SAAS;IACvB,CAAC,CAAC;IACF,IAAI,CAACa,WAAW,GAAGA,WAAW;EAChC;AACF,CAAC;AACD,SAASyB,gBAAgBA,CAACjC,CAAC,EAAE;EAC3B,OAAOA,CAAC,YAAYO,cAAc;AACpC;;AAEA;AACA,SAAS2B,MAAMA,CAACC,IAAI,EAAEC,SAAS,EAAE1H,OAAO,EAAE;EACxC,KAAK,IAAI4F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8B,SAAS,CAAClF,MAAM,EAAEoD,CAAC,EAAE,EAAE6B,IAAI,GAAGzH,OAAO,CAAC2H,WAAW,CAACF,IAAI,EAAEC,SAAS,CAAC9D,KAAK,CAACgC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC8B,SAAS,CAAC9B,CAAC,CAAC,CAAC;EACjH,OAAO6B,IAAI;AACb;AACA,SAASG,kBAAkBA,CAACC,UAAU,EAAE;EACtC,MAAMC,WAAW,GAAGC,cAAc,CAACF,UAAU,CAAC;EAC9C,MAAMjD,MAAM,GAAG,EAAE;EACjB,MAAMoD,IAAI,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAAC;EACtC,KAAK,MAAMP,SAAS,IAAII,WAAW,EAAE;IACnC,MAAM9I,GAAG,GAAG0I,SAAS,CAAClG,IAAI,CAAC,CAAC;IAC5B,IAAI,CAACwG,IAAI,CAACrG,GAAG,CAAC3C,GAAG,CAAC,EAAE;MAClBgJ,IAAI,CAACE,GAAG,CAAClJ,GAAG,CAAC;MACb4F,MAAM,CAACJ,IAAI,CAACkD,SAAS,CAAC;IACxB;EACF;EACA,OAAO9C,MAAM;AACf;AACA,SAASuD,iBAAiBA,CAAC/D,CAAC,EAAEC,CAAC,EAAE;EAC/B,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9D,IAAI,CAACC,GAAG,CAACqC,CAAC,CAAC5B,MAAM,EAAE6B,CAAC,CAAC7B,MAAM,CAAC,EAAEoD,CAAC,EAAE,EAAE;IACrD,IAAIxB,CAAC,CAACwB,CAAC,CAAC,GAAGvB,CAAC,CAACuB,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;IAC1B,IAAIxB,CAAC,CAACwB,CAAC,CAAC,GAAGvB,CAAC,CAACuB,CAAC,CAAC,EAAE,OAAO,CAAC;EAC3B;EACA,OAAOxB,CAAC,CAAC5B,MAAM,GAAG6B,CAAC,CAAC7B,MAAM;AAC5B;AACA,SAASuF,cAAcA,CAACF,UAAU,EAAE;EAClC,OAAOA,UAAU,CAAC1G,IAAI,CAACgH,iBAAiB,CAAC;AAC3C;AACA,SAAStH,IAAIA,CAAC4G,IAAI,EAAEzH,OAAO,EAAE;EAC3B,IAAIoI,KAAK;EACTC,KAAK,CAACZ,IAAI,EAAE;IACV,GAAGzH,OAAO;IACVsI,OAAO,EAAEA,CAACC,KAAK,EAAEb,SAAS,KAAK;MAC7B,IAAI1H,OAAO,CAACwI,SAAS,CAACD,KAAK,EAAEb,SAAS,CAAC,EAAE;QACvCU,KAAK,GAAGG,KAAK;QACb,OAAO,MAAM;MACf;IACF;EACF,CAAC,CAAC;EACF,OAAOH,KAAK;AACd;AACA,SAASK,aAAaA,CAAChB,IAAI,EAAEzH,OAAO,EAAE;EACpC,IAAIoI,KAAK;EACTC,KAAK,CAACZ,IAAI,EAAE;IACVa,OAAO,EAAEA,CAACC,KAAK,EAAEb,SAAS,KAAK;MAC7B,IAAI1H,OAAO,CAACwI,SAAS,CAACD,KAAK,EAAEb,SAAS,CAAC,EAAE;QACvCU,KAAK,GAAG,CAAC,GAAGV,SAAS,CAAC;QACtB,OAAO,MAAM;MACf;IACF,CAAC;IACDC,WAAW,EAAE3H,OAAO,CAAC2H;EACvB,CAAC,CAAC;EACF,OAAOS,KAAK;AACd;AACA,SAASM,MAAMA,CAACjB,IAAI,EAAEzH,OAAO,EAAE;EAC7B,IAAI4E,MAAM,GAAG5E,OAAO,CAAC2I,aAAa;EAClCN,KAAK,CAACZ,IAAI,EAAE;IACV,GAAGzH,OAAO;IACVsI,OAAO,EAAEA,CAACC,KAAK,EAAEb,SAAS,KAAK;MAC7B9C,MAAM,GAAG5E,OAAO,CAAC4I,UAAU,CAAChE,MAAM,EAAE2D,KAAK,EAAEb,SAAS,CAAC;IACvD;EACF,CAAC,CAAC;EACF,OAAO9C,MAAM;AACf;AACA,SAASiE,OAAOA,CAACpB,IAAI,EAAEzH,OAAO,EAAE;EAC9B,OAAO0I,MAAM,CAACjB,IAAI,EAAE;IAClB,GAAGzH,OAAO;IACV2I,aAAa,EAAE,EAAE;IACjBC,UAAU,EAAEA,CAAChE,MAAM,EAAE2D,KAAK,EAAEb,SAAS,KAAK;MACxC9C,MAAM,CAACJ,IAAI,CAAC,GAAGxE,OAAO,CAAC8I,SAAS,CAACP,KAAK,EAAEb,SAAS,CAAC,CAAC;MACnD,OAAO9C,MAAM;IACf;EACF,CAAC,CAAC;AACJ;AACA,SAASmE,eAAeA,CAACrI,KAAK,EAAEsI,KAAK,EAAE;EACrC,OAAO;IAAEC,IAAI,EAAE,QAAQ;IAAEvI,KAAK;IAAEsI;EAAM,CAAC;AACzC;AACA,SAASE,eAAeA,CAACC,OAAO,EAAE;EAChC,OAAO;IAAEF,IAAI,EAAE,QAAQ;IAAEE;EAAQ,CAAC;AACpC;AACA,SAASC,gBAAgBA,CAAA,EAAG;EAC1B,OAAO;IAAEH,IAAI,EAAE;EAAU,CAAC;AAC5B;AACA,SAASI,cAAcA,CAAC3B,SAAS,EAAE;EACjC,OAAO,CAACA,SAAS,CAAC9D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE8D,SAAS,CAACA,SAAS,CAAClF,MAAM,GAAG,CAAC,CAAC,CAAC;AAClE;AACA,SAAS8G,sBAAsBA,CAAC5B,SAAS,EAAEsB,KAAK,EAAEO,UAAU,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAAC,EAAE;EACxF,MAAM,CAACC,eAAe,EAAE/I,KAAK,CAAC,GAAG2I,cAAc,CAAC3B,SAAS,CAAC;EAC1D,KAAK,IAAI9B,CAAC,GAAG6D,eAAe,CAACjH,MAAM,GAAG,CAAC,EAAEoD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACpD,MAAM8D,SAAS,GAAGD,eAAe,CAAC7F,KAAK,CAAC,CAAC,EAAEgC,CAAC,CAAC,CAACpE,IAAI,CAAC,CAAC;IACpD,QAAQ+H,UAAU,CAACI,GAAG,CAACD,SAAS,CAAC,EAAET,IAAI;MACrC,KAAK,QAAQ;QACX;IACJ;IACAM,UAAU,CAACK,GAAG,CAACF,SAAS,EAAEN,gBAAgB,CAAC,CAAC,CAAC;EAC/C;EACA,MAAMS,SAAS,GAAGN,UAAU,CAACI,GAAG,CAACF,eAAe,CAACjI,IAAI,CAAC,CAAC,CAAC;EACxD,QAAQqI,SAAS,EAAEZ,IAAI;IACrB,KAAK,QAAQ;MACXM,UAAU,CAACK,GAAG,CAACH,eAAe,CAACjI,IAAI,CAAC,CAAC,EAAE;QACrCyH,IAAI,EAAE,kBAAkB;QACxBa,aAAa,EAAED,SAAS,CAACV,OAAO;QAChCY,WAAW,EAAErJ,KAAK;QAClBsJ,WAAW,EAAEhB;MACf,CAAC,CAAC;MACF;IACF;MACEO,UAAU,CAACK,GAAG,CAACH,eAAe,CAACjI,IAAI,CAAC,CAAC,EAAEuH,eAAe,CAACrI,KAAK,EAAEsI,KAAK,CAAC,CAAC;EACzE;EACA,OAAOO,UAAU;AACnB;AACA,SAASU,oBAAoBA,CAACpC,UAAU,EAAE;EACxC,MAAM0B,UAAU,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAAC;EAC5C,MAAMU,eAAe,GAAG,eAAgB,IAAIV,GAAG,CAAC,CAAC;EACjD,KAAK,MAAM9B,SAAS,IAAIG,UAAU,EAAE;IAClC,MAAM6B,SAAS,GAAGhC,SAAS,CAAC9D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACpC,IAAI,CAAC,CAAC;IAC/C,MAAMvC,KAAK,GAAGiL,eAAe,CAACP,GAAG,CAACD,SAAS,CAAC,IAAI,EAAE;IAClDzK,KAAK,CAACuF,IAAI,CAACkD,SAAS,CAACA,SAAS,CAAClF,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3C0H,eAAe,CAACN,GAAG,CACjBF,SAAS,EACTzK,KAAK,CAACkC,IAAI,CAAC,CAACiD,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAC5B,CAAC;EACH;EACA,KAAK,MAAMqD,SAAS,IAAIG,UAAU,EAAE;IAClC,KAAK,IAAIjC,CAAC,GAAG8B,SAAS,CAAClF,MAAM,GAAG,CAAC,EAAEoD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC9C,MAAM8D,SAAS,GAAGhC,SAAS,CAAC9D,KAAK,CAAC,CAAC,EAAEgC,CAAC,CAAC,CAACpE,IAAI,CAAC,CAAC;MAC9C,IAAI,CAAC+H,UAAU,CAAC5H,GAAG,CAAC+H,SAAS,CAAC,EAAE;QAC9BH,UAAU,CAACK,GAAG,CAACF,SAAS,EAAEN,gBAAgB,CAAC,CAAC,CAAC;MAC/C;IACF;EACF;EACA,KAAK,MAAM,CAACM,SAAS,EAAEP,OAAO,CAAC,IAAIe,eAAe,EAAE;IAClDX,UAAU,CAACK,GAAG,CAACF,SAAS,EAAER,eAAe,CAACC,OAAO,CAAC,CAAC;EACrD;EACA,OAAOI,UAAU;AACnB;AACA,SAASY,oBAAoBA,CAACzC,SAAS,EAAED,IAAI,EAAE;EAC7C,MAAM8B,UAAU,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAAC;EAC5C,MAAM,CAACC,eAAe,EAAE/I,KAAK,CAAC,GAAG2I,cAAc,CAAC3B,SAAS,CAAC;EAC1D,KAAK,IAAI9B,CAAC,GAAG6D,eAAe,CAACjH,MAAM,GAAG,CAAC,EAAEoD,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACpD,MAAM8D,SAAS,GAAGD,eAAe,CAAC7F,KAAK,CAAC,CAAC,EAAEgC,CAAC,CAAC,CAACpE,IAAI,CAAC,CAAC;IACpD+H,UAAU,CAACK,GAAG,CAACF,SAAS,EAAEN,gBAAgB,CAAC,CAAC,CAAC;EAC/C;EACAG,UAAU,CAACK,GAAG,CAACH,eAAe,CAACjI,IAAI,CAAC,CAAC,EAAE;IACrCyH,IAAI,EAAE,kBAAkB;IACxBa,aAAa,EAAE,CAACpJ,KAAK,CAAC;IACtBqJ,WAAW,EAAErJ,KAAK;IAClBsJ,WAAW,EAAE,CAACvC,IAAI;EACpB,CAAC,CAAC;EACF,OAAO8B,UAAU;AACnB;AACA,SAASa,MAAMA,CAAC3C,IAAI,EAAE8B,UAAU,EAAEvJ,OAAO,EAAE;EACzC,OAAOM,GAAG,CAACmH,IAAI,EAAE;IACf,GAAGzH,OAAO;IACV2H,WAAW,EAAEA,CAAC0C,KAAK,EAAE3C,SAAS,KAAK;MACjC,MAAM1I,GAAG,GAAG0I,SAAS,CAAClG,IAAI,CAAC,CAAC;MAC5B,MAAMqI,SAAS,GAAGN,UAAU,CAACI,GAAG,CAAC3K,GAAG,CAAC;MACrC,QAAQ6K,SAAS,EAAEZ,IAAI;QACrB,KAAK,SAAS;QACd,KAAK,QAAQ;QACb,KAAK,kBAAkB;QACvB,KAAK,QAAQ;UACX,OAAOjJ,OAAO,CAAC2H,WAAW,CAAC0C,KAAK,EAAE3C,SAAS,CAAC;QAC9C;UACE,OAAO,EAAE;MACb;IACF,CAAC;IACDoB,SAAS,EAAEA,CAACuB,KAAK,EAAEC,QAAQ,EAAE5C,SAAS,KAAK;MACzC,MAAM1I,GAAG,GAAG0I,SAAS,CAAClG,IAAI,CAAC,CAAC;MAC5B,MAAMqI,SAAS,GAAGN,UAAU,CAACI,GAAG,CAAC3K,GAAG,CAAC;MACrC,QAAQ6K,SAAS,EAAEZ,IAAI;QACrB,KAAK,QAAQ;UACX,OAAOjJ,OAAO,CAACuK,MAAM,CACnBF,KAAK,EACLC,QAAQ,CAAC9J,MAAM,CAAC,CAACgF,CAAC,EAAE9E,KAAK,KAAK,CAACmJ,SAAS,CAACV,OAAO,CAAClF,QAAQ,CAACvD,KAAK,CAAC,CAAC,EACjEgH,SACF,CAAC;QACH,KAAK,kBAAkB;UACrB,MAAM8C,eAAe,GAAGF,QAAQ,CAAC9J,MAAM,CAAC,CAACgF,CAAC,EAAE9E,KAAK,KAAK,CAACmJ,SAAS,CAACC,aAAa,CAAC7F,QAAQ,CAACvD,KAAK,CAAC,CAAC;UAC/F,MAAM+J,aAAa,GAAGZ,SAAS,CAACC,aAAa,CAACpB,MAAM,CAClD,CAAChI,KAAK,EAAEgK,YAAY,KAAKA,YAAY,GAAGhK,KAAK,GAAGA,KAAK,GAAG,CAAC,GAAGA,KAAK,EACjEmJ,SAAS,CAACE,WACZ,CAAC;UACD,OAAO/J,OAAO,CAACuK,MAAM,CAACF,KAAK,EAAEM,MAAM,CAACH,eAAe,EAAEC,aAAa,EAAE,CAAC,EAAE,GAAGZ,SAAS,CAACG,WAAW,CAAC,EAAEtC,SAAS,CAAC;QAC9G,KAAK,QAAQ;UACX,OAAO1H,OAAO,CAACuK,MAAM,CAACF,KAAK,EAAEM,MAAM,CAACL,QAAQ,EAAET,SAAS,CAACnJ,KAAK,EAAE,CAAC,EAAE,GAAGmJ,SAAS,CAACb,KAAK,CAAC,EAAEtB,SAAS,CAAC;QACnG,KAAK,SAAS;UACZ,OAAO1H,OAAO,CAACuK,MAAM,CAACF,KAAK,EAAEC,QAAQ,EAAE5C,SAAS,CAAC;QACnD;UACE,OAAO2C,KAAK;MAChB;IACF;EACF,CAAC,CAAC;AACJ;AACA,SAASM,MAAMA,CAACC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAE,GAAG7K,KAAK,EAAE;EACnD,OAAO,CAAC,GAAG2K,KAAK,CAAChH,KAAK,CAAC,CAAC,EAAEiH,KAAK,CAAC,EAAE,GAAG5K,KAAK,EAAE,GAAG2K,KAAK,CAAChH,KAAK,CAACiH,KAAK,GAAGC,WAAW,CAAC,CAAC;AAClF;AACA,SAASxK,GAAGA,CAACmH,IAAI,EAAEzH,OAAO,EAAE;EAC1B,MAAM+K,WAAW,GAAG,CAAC,CAAC;EACtB1C,KAAK,CAACZ,IAAI,EAAE;IACV,GAAGzH,OAAO;IACVgL,OAAO,EAAEA,CAACzC,KAAK,EAAEb,SAAS,KAAK;MAC7B,MAAMuD,YAAY,GAAG,CAAC,CAAC,EAAE,GAAGvD,SAAS,CAAC;MACtC,MAAM1I,GAAG,GAAGiM,YAAY,CAACzJ,IAAI,CAAC,CAAC;MAC/B,MAAM0J,WAAW,GAAGlL,OAAO,CAAC8I,SAAS,CAACP,KAAK,EAAEwC,WAAW,CAAC/L,GAAG,CAAC,IAAI,EAAE,EAAE0I,SAAS,CAAC;MAC/E,MAAMgC,SAAS,GAAGuB,YAAY,CAACrH,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACpC,IAAI,CAAC,CAAC;MAClD,MAAM2J,cAAc,GAAGJ,WAAW,CAACrB,SAAS,CAAC,IAAI,EAAE;MACnDyB,cAAc,CAAC3G,IAAI,CAAC0G,WAAW,CAAC;MAChCH,WAAW,CAACrB,SAAS,CAAC,GAAGyB,cAAc;IACzC;EACF,CAAC,CAAC;EACF,OAAOJ,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3B;AACA,SAASK,OAAOA,CAAC3D,IAAI,EAAEzH,OAAO,EAAE;EAC9B,MAAM;IAAEgJ,KAAK;IAAE9G;EAAG,CAAC,GAAGlC,OAAO;EAC7B,IAAIkC,EAAE,CAACM,MAAM,KAAK,CAAC,EAAE,MAAM,IAAI6I,KAAK,CAAC,gCAAgC,CAAC;EACtE,MAAM1I,KAAK,GAAG2G,sBAAsB,CAACpH,EAAE,EAAE8G,KAAK,CAAC;EAC/C,OAAOoB,MAAM,CAAC3C,IAAI,EAAE9E,KAAK,EAAE3C,OAAO,CAAC;AACrC;AACA,SAASsL,OAAOA,CAAC7D,IAAI,EAAEzH,OAAO,EAAE;EAC9B,IAAIA,OAAO,CAACkC,EAAE,CAACM,MAAM,KAAK,CAAC,EAAE,OAAOxC,OAAO,CAACyH,IAAI;EAChD,MAAM8B,UAAU,GAAGY,oBAAoB,CAACnK,OAAO,CAACkC,EAAE,EAAElC,OAAO,CAACyH,IAAI,CAAC;EACjE,OAAO2C,MAAM,CAAC3C,IAAI,EAAE8B,UAAU,EAAEvJ,OAAO,CAAC;AAC1C;AACA,SAASuL,MAAMA,CAAC9D,IAAI,EAAEzH,OAAO,EAAE;EAC7B,IAAIA,OAAO,CAAC6H,UAAU,CAACrF,MAAM,KAAK,CAAC,EAAE,OAAOiF,IAAI;EAChD,KAAK,MAAMC,SAAS,IAAI1H,OAAO,CAAC6H,UAAU,EAAE;IAC1C,IAAIH,SAAS,CAAClF,MAAM,KAAK,CAAC,EAAE,MAAM,IAAI6I,KAAK,CAAC,4BAA4B,CAAC;EAC3E;EACA,MAAM9B,UAAU,GAAGU,oBAAoB,CAACjK,OAAO,CAAC6H,UAAU,CAAC;EAC3D,OAAOuC,MAAM,CAAC3C,IAAI,EAAE8B,UAAU,EAAEvJ,OAAO,CAAC;AAC1C;AACA,SAASwL,KAAKA,CAAC/D,IAAI,EAAEzH,OAAO,EAAE;EAC5B,IAAIA,OAAO,CAAC6H,UAAU,CAACrF,MAAM,KAAK,CAAC,EAAE,OAAOiF,IAAI;EAChD,KAAK,MAAMC,SAAS,IAAI1H,OAAO,CAAC6H,UAAU,EAAE;IAC1C,IAAIH,SAAS,CAAClF,MAAM,KAAK,CAAC,EAAE,MAAM,IAAI6I,KAAK,CAAC,0BAA0B,CAAC;EACzE;EACA,IAAIrL,OAAO,CAACsE,EAAE,CAAC9B,MAAM,KAAK,CAAC,EAAE,MAAM,IAAI6I,KAAK,CAAC,8BAA8B,CAAC;EAC5E,MAAMI,mBAAmB,GAAG7D,kBAAkB,CAAC5H,OAAO,CAAC6H,UAAU,CAAC;EAClE,MAAM6D,aAAa,GAAGD,mBAAmB,CAACnL,GAAG,CAAEoH,SAAS,IAAKF,MAAM,CAACC,IAAI,EAAEC,SAAS,EAAE1H,OAAO,CAAC,CAAC;EAC9F,MAAMuJ,UAAU,GAAGD,sBAAsB,CAACtJ,OAAO,CAACsE,EAAE,EAAEoH,aAAa,EAAEzB,oBAAoB,CAACwB,mBAAmB,CAAC,CAAC;EAC/G,OAAOrB,MAAM,CAAC3C,IAAI,EAAE8B,UAAU,EAAEvJ,OAAO,CAAC;AAC1C;AACA,SAASqI,KAAKA,CAACZ,IAAI,EAAEzH,OAAO,EAAE;EAC5B,MAAM;IAAEsI,OAAO;IAAE0C,OAAO;IAAErD;EAAY,CAAC,GAAG3H,OAAO;EACjD,IAAI0H,SAAS,GAAG,EAAE;EAClB,IAAIiE,KAAK,GAAG,CAAC;IAAElE;EAAK,CAAC,CAAC;EACtB,MAAMmE,YAAY,GAAG5L,OAAO,CAAC6L,cAAc,GAAG,MAAMnE,SAAS,GAAG,MAAMA,SAAS,CAAC9D,KAAK,CAAC,CAAC;EACvF,OAAO+H,KAAK,CAACnJ,MAAM,GAAG,CAAC,EAAE;IACvB,IAAIsJ,OAAO,GAAGH,KAAK,CAACA,KAAK,CAACnJ,MAAM,GAAG,CAAC,CAAC;IACrC,IAAIsJ,OAAO,CAACnJ,KAAK,KAAK,KAAK,CAAC,EAAE;MAC5B,MAAMoJ,WAAW,GAAGzD,OAAO,GAAGwD,OAAO,CAACrE,IAAI,EAAEmE,YAAY,CAAC,CAAC,CAAC;MAC3D,IAAIG,WAAW,KAAK,MAAM,EAAE;MAC5BD,OAAO,CAACnJ,KAAK,GAAGoJ,WAAW,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;IACjD;IACA,MAAMzB,QAAQ,GAAGwB,OAAO,CAACxB,QAAQ,IAAI3C,WAAW,CAACmE,OAAO,CAACrE,IAAI,EAAEmE,YAAY,CAAC,CAAC,CAAC;IAC9EE,OAAO,CAACxB,QAAQ,KAAKwB,OAAO,CAACxB,QAAQ,GAAGA,QAAQ,CAAC;IACjD,IAAIwB,OAAO,CAACnJ,KAAK,KAAK,CAAC,CAAC,EAAE;MACxB,IAAImJ,OAAO,CAACnJ,KAAK,GAAG2H,QAAQ,CAAC9H,MAAM,EAAE;QACnC,IAAIwJ,YAAY,GAAGF,OAAO,CAACnJ,KAAK;QAChC+E,SAAS,CAAClD,IAAI,CAACwH,YAAY,CAAC;QAC5BL,KAAK,CAACnH,IAAI,CAAC;UAAEiD,IAAI,EAAE6C,QAAQ,CAAC0B,YAAY;QAAE,CAAC,CAAC;QAC5CF,OAAO,CAACnJ,KAAK,GAAGqJ,YAAY,GAAG,CAAC;QAChC;MACF;MACA,MAAMC,WAAW,GAAGjB,OAAO,GAAGc,OAAO,CAACrE,IAAI,EAAEmE,YAAY,CAAC,CAAC,CAAC;MAC3D,IAAIK,WAAW,KAAK,MAAM,EAAE;IAC9B;IACAvE,SAAS,CAACwE,GAAG,CAAC,CAAC;IACfP,KAAK,CAACO,GAAG,CAAC,CAAC;EACb;AACF;;AAEA;AACA,IAAIC,cAAc,GAAG,MAAM;EACzBpM,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtBX,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC;IAC/BA,aAAa,CAAC,IAAI,EAAE,SAAS,EAAGa,KAAK,IAAK;MACxC,OAAO7B,OAAO,CAAC,IAAI,CAAC+N,QAAQ,EAAElM,KAAK,CAACkM,QAAQ,CAAC;IAC/C,CAAC,CAAC;IACF/M,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAGoI,IAAI,IAAK;MAC/C,OAAO,IAAI,CAACzH,OAAO,CAACqM,cAAc,GAAG5E,IAAI,CAAC,IAAI6E,SAAS,CAACD,cAAc,CAAC5E,IAAI,CAAC,IAAI,EAAE;IACpF,CAAC,CAAC;IACFpI,aAAa,CAAC,IAAI,EAAE,cAAc,EAAGoI,IAAI,IAAK;MAC5C,OAAO,IAAI,CAACzH,OAAO,CAACuM,WAAW,GAAG9E,IAAI,CAAC,IAAI6E,SAAS,CAACC,WAAW,CAAC9E,IAAI,CAAC;IACxE,CAAC,CAAC;IACFpI,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAGoI,IAAI,IAAK;MAC/C,OAAO,IAAI,CAACzH,OAAO,CAACwM,cAAc,GAAG/E,IAAI,CAAC,IAAI6E,SAAS,CAACE,cAAc,CAAC/E,IAAI,CAAC;IAC9E,CAAC,CAAC;IACFpI,aAAa,CAAC,IAAI,EAAE,WAAW,EAAGJ,KAAK,IAAK;MAC1C,MAAMwI,IAAI,GAAG,IAAI,CAACgF,QAAQ,CAACxN,KAAK,CAAC;MACjC,IAAI,CAACwI,IAAI,EAAE,OAAO,IAAI;MACtB,OAAO,IAAI,CAACiF,aAAa,CAACjF,IAAI,CAAC;IACjC,CAAC,CAAC;IACFpI,aAAa,CAAC,IAAI,EAAE,eAAe,EAAGoI,IAAI,IAAK;MAC7C,OAAO,IAAI,CAACzH,OAAO,CAAC2M,YAAY,GAAGlF,IAAI,CAAC,IAAI6E,SAAS,CAACK,YAAY,CAAClF,IAAI,CAAC;IAC1E,CAAC,CAAC;IACFpI,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,CAAC+M,QAAQ,GAAG,IAAI,CAACA,QAAQ,KAAK;MAChE,IAAIQ,UAAU;MACdvE,KAAK,CAAC+D,QAAQ,EAAE;QACdzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCvE,OAAO,EAAEA,CAACb,IAAI,EAAEC,SAAS,KAAK;UAC5B,IAAI,CAACkF,UAAU,IAAIlF,SAAS,CAAClF,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAACsK,eAAe,CAACrF,IAAI,CAAC,EAAE;YACtEmF,UAAU,GAAGnF,IAAI;YACjB,OAAO,MAAM;UACf;QACF;MACF,CAAC,CAAC;MACF,OAAOmF,UAAU;IACnB,CAAC,CAAC;IACFvN,aAAa,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC+M,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAEW,IAAI,GAAG,CAAC,CAAC,KAAK;MAC1E,IAAIC,SAAS;MACb3E,KAAK,CAAC+D,QAAQ,EAAE;QACdzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCvE,OAAO,EAAEA,CAACb,IAAI,EAAEC,SAAS,KAAK;UAC5B,MAAMuF,SAAS,GAAG,IAAI,CAACC,YAAY,CAACzF,IAAI,CAAC;UACzC,IAAIsF,IAAI,CAACI,IAAI,GAAG;YAAElO,KAAK,EAAEgO,SAAS;YAAExF,IAAI;YAAEC;UAAU,CAAC,CAAC,EAAE,OAAO,MAAM;UACrE,IAAIA,SAAS,CAAClF,MAAM,GAAG,CAAC,EAAE,OAAO,MAAM;UACvC,IAAI,CAAC,IAAI,CAACsK,eAAe,CAACrF,IAAI,CAAC,EAAE;YAC/BuF,SAAS,GAAGvF,IAAI;UAClB;QACF;MACF,CAAC,CAAC;MACF,OAAOuF,SAAS;IAClB,CAAC,CAAC;IACF3N,aAAa,CAAC,IAAI,EAAE,IAAI,EAAGqI,SAAS,IAAK;MACvC,OAAOF,MAAM,CAAC,IAAI,CAAC4E,QAAQ,EAAE1E,SAAS,EAAE;QACtCC,WAAW,EAAE,IAAI,CAACkF;MACpB,CAAC,CAAC;IACJ,CAAC,CAAC;IACFxN,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,CAACJ,KAAK,EAAEmN,QAAQ,GAAG,IAAI,CAACA,QAAQ,KAAK;MACnE,OAAOvL,IAAI,CAACuL,QAAQ,EAAE;QACpBzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCrE,SAAS,EAAGf,IAAI,IAAK,IAAI,CAACyF,YAAY,CAACzF,IAAI,CAAC,KAAKxI;MACnD,CAAC,CAAC;IACJ,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,MAAM,EAAGuB,MAAM,IAAK;MACtC,OAAOA,MAAM,CAAC8H,MAAM,CAClB,CAAC0E,GAAG,EAAEnO,KAAK,KAAK;QACd,MAAMyI,SAAS,GAAG,IAAI,CAACkE,YAAY,CAAC3M,KAAK,CAAC;QAC1C,IAAIyI,SAAS,IAAI,IAAI,EAAE0F,GAAG,CAAC5I,IAAI,CAAC;UAAEvF,KAAK;UAAEyI;QAAU,CAAC,CAAC;QACrD,OAAO0F,GAAG;MACZ,CAAC,EACD,EACF,CAAC,CAACjM,IAAI,CAAC,CAACiD,CAAC,EAAEC,CAAC,KAAK8D,iBAAiB,CAAC/D,CAAC,CAACsD,SAAS,EAAErD,CAAC,CAACqD,SAAS,CAAC,CAAC,CAACpH,GAAG,CAAC,CAAC;QAAErB;MAAM,CAAC,KAAKA,KAAK,CAAC;IACzF,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,cAAc,EAAGJ,KAAK,IAAK;MAC7C,OAAOwJ,aAAa,CAAC,IAAI,CAAC2D,QAAQ,EAAE;QAClCzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCrE,SAAS,EAAGf,IAAI,IAAK,IAAI,CAACyF,YAAY,CAACzF,IAAI,CAAC,KAAKxI;MACnD,CAAC,CAAC;IACJ,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,UAAU,EAAGqI,SAAS,IAAK;MAC7C,MAAMD,IAAI,GAAG,IAAI,CAACvF,EAAE,CAACwF,SAAS,CAAC;MAC/B,OAAOD,IAAI,GAAG,IAAI,CAACyF,YAAY,CAACzF,IAAI,CAAC,GAAG,KAAK,CAAC;IAChD,CAAC,CAAC;IACFpI,aAAa,CAAC,IAAI,EAAE,cAAc,EAAGqI,SAAS,IAAK;MACjD,IAAI,CAACA,SAAS,EAAE,OAAO,EAAE;MACzB,MAAM2F,SAAS,GAAG,EAAE;MACpB,IAAIC,WAAW,GAAG,CAAC,GAAG5F,SAAS,CAAC;MAChC,OAAO4F,WAAW,CAAC9K,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAMiF,IAAI,GAAG,IAAI,CAACvF,EAAE,CAACoL,WAAW,CAAC;QACjC,IAAI7F,IAAI,EAAE4F,SAAS,CAACE,OAAO,CAAC,IAAI,CAACL,YAAY,CAACzF,IAAI,CAAC,CAAC;QACpD6F,WAAW,CAACpB,GAAG,CAAC,CAAC;MACnB;MACA,OAAOmB,SAAS;IAClB,CAAC,CAAC;IACFhO,aAAa,CAAC,IAAI,EAAE,UAAU,EAAGJ,KAAK,IAAK;MACzC,MAAMyI,SAAS,GAAGe,aAAa,CAAC,IAAI,CAAC2D,QAAQ,EAAE;QAC7CzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCrE,SAAS,EAAGf,IAAI,IAAK,IAAI,CAACyF,YAAY,CAACzF,IAAI,CAAC,KAAKxI;MACnD,CAAC,CAAC;MACF,OAAOyI,SAAS,EAAElF,MAAM,IAAI,CAAC;IAC/B,CAAC,CAAC;IACFnD,aAAa,CAAC,IAAI,EAAE,YAAY,EAAGoI,IAAI,IAAK;MAC1C,OAAO,IAAI,CAACyF,YAAY,CAACzF,IAAI,CAAC,KAAK,IAAI,CAACyF,YAAY,CAAC,IAAI,CAACd,QAAQ,CAAC;IACrE,CAAC,CAAC;IACF/M,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,CAACoK,eAAe,EAAE+D,cAAc,KAAK;MACnE,IAAI,CAAC/D,eAAe,IAAI,CAAC+D,cAAc,EAAE,OAAO,KAAK;MACrD,OAAOA,cAAc,CAAC5J,KAAK,CAAC,CAAC,EAAE6F,eAAe,CAACjH,MAAM,CAAC,CAACS,KAAK,CAAC,CAACuC,CAAC,EAAEI,CAAC,KAAK6D,eAAe,CAAC7D,CAAC,CAAC,KAAK4H,cAAc,CAAC5H,CAAC,CAAC,CAAC;IAClH,CAAC,CAAC;IACFvG,aAAa,CAAC,IAAI,EAAE,aAAa,EAAE,CAACJ,KAAK,EAAE8N,IAAI,GAAG,CAAC,CAAC,KAAK;MACvD,IAAI3E,KAAK,GAAG,KAAK;MACjB,IAAIqF,QAAQ;MACZpF,KAAK,CAAC,IAAI,CAAC+D,QAAQ,EAAE;QACnBzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCvE,OAAO,EAAEA,CAACb,IAAI,EAAEC,SAAS,KAAK;UAC5B,IAAI,IAAI,CAACgG,UAAU,CAACjG,IAAI,CAAC,EAAE;UAC3B,MAAMwF,SAAS,GAAG,IAAI,CAACC,YAAY,CAACzF,IAAI,CAAC;UACzC,IAAIsF,IAAI,CAACI,IAAI,GAAG;YAAElO,KAAK,EAAEgO,SAAS;YAAExF,IAAI;YAAEC;UAAU,CAAC,CAAC,EAAE;YACtD,IAAIuF,SAAS,KAAKhO,KAAK,EAAE;cACvBmJ,KAAK,GAAG,IAAI;YACd;YACA,OAAO,MAAM;UACf;UACA,IAAIA,KAAK,IAAI,CAAC,IAAI,CAAC0E,eAAe,CAACrF,IAAI,CAAC,EAAE;YACxCgG,QAAQ,GAAGhG,IAAI;YACf,OAAO,MAAM;UACf;UACA,IAAIwF,SAAS,KAAKhO,KAAK,EAAE;YACvBmJ,KAAK,GAAG,IAAI;UACd;QACF;MACF,CAAC,CAAC;MACF,OAAOqF,QAAQ;IACjB,CAAC,CAAC;IACFpO,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAE,CAACJ,KAAK,EAAE8N,IAAI,GAAG,CAAC,CAAC,KAAK;MAC3D,IAAIY,YAAY;MAChB,IAAIvF,KAAK,GAAG,KAAK;MACjBC,KAAK,CAAC,IAAI,CAAC+D,QAAQ,EAAE;QACnBzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCvE,OAAO,EAAEA,CAACb,IAAI,EAAEC,SAAS,KAAK;UAC5B,IAAI,IAAI,CAACgG,UAAU,CAACjG,IAAI,CAAC,EAAE;UAC3B,MAAMwF,SAAS,GAAG,IAAI,CAACC,YAAY,CAACzF,IAAI,CAAC;UACzC,IAAIsF,IAAI,CAACI,IAAI,GAAG;YAAElO,KAAK,EAAEgO,SAAS;YAAExF,IAAI;YAAEC;UAAU,CAAC,CAAC,EAAE;YACtD,OAAO,MAAM;UACf;UACA,IAAIuF,SAAS,KAAKhO,KAAK,EAAE;YACvBmJ,KAAK,GAAG,IAAI;YACZ,OAAO,MAAM;UACf;UACA,IAAI,CAAC,IAAI,CAAC0E,eAAe,CAACrF,IAAI,CAAC,EAAE;YAC/BkG,YAAY,GAAGlG,IAAI;UACrB;QACF;MACF,CAAC,CAAC;MACF,OAAOW,KAAK,GAAGuF,YAAY,GAAG,KAAK,CAAC;IACtC,CAAC,CAAC;IACFtO,aAAa,CAAC,IAAI,EAAE,gBAAgB,EAAGuB,MAAM,IAAK;MAChD,MAAMgE,MAAM,GAAG,EAAE;MACjB,IAAI8C,SAAS,GAAG,IAAI,CAACkE,YAAY,CAAChL,MAAM,CAAC;MACzC,OAAO8G,SAAS,IAAIA,SAAS,CAAClF,MAAM,GAAG,CAAC,EAAE;QACxCkF,SAAS,CAACwE,GAAG,CAAC,CAAC;QACf,MAAM0B,UAAU,GAAG,IAAI,CAAC1L,EAAE,CAACwF,SAAS,CAAC;QACrC,IAAIkG,UAAU,IAAI,CAAC,IAAI,CAACF,UAAU,CAACE,UAAU,CAAC,EAAE;UAC9ChJ,MAAM,CAAC2I,OAAO,CAACK,UAAU,CAAC;QAC5B;MACF;MACA,OAAOhJ,MAAM;IACf,CAAC,CAAC;IACFvF,aAAa,CAAC,IAAI,EAAE,oBAAoB,EAAGqI,SAAS,IAAK;MACvD,OAAOA,SAAS,CAAC9D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC;IACFvE,aAAa,CAAC,IAAI,EAAE,eAAe,EAAGwO,gBAAgB,IAAK;MACzD,MAAMnG,SAAS,GAAG,OAAOmG,gBAAgB,KAAK,QAAQ,GAAG,IAAI,CAACjC,YAAY,CAACiC,gBAAgB,CAAC,GAAGA,gBAAgB;MAC/G,OAAOnG,SAAS,GAAG,IAAI,CAACxF,EAAE,CAAC,IAAI,CAAC4L,kBAAkB,CAACpG,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC;IACzE,CAAC,CAAC;IACFrI,aAAa,CAAC,IAAI,EAAE,OAAO,EAAG0N,IAAI,IAAK;MACrC,MAAM;QAAEI,IAAI;QAAE,GAAGY;MAAK,CAAC,GAAGhB,IAAI;MAC9B1E,KAAK,CAAC,IAAI,CAAC+D,QAAQ,EAAE;QACnB,GAAG2B,IAAI;QACPpG,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCvE,OAAO,EAAEA,CAACb,IAAI,EAAEC,SAAS,KAAK;UAC5B,IAAI,IAAI,CAACgG,UAAU,CAACjG,IAAI,CAAC,EAAE;UAC3B,IAAI0F,IAAI,GAAG;YAAElO,KAAK,EAAE,IAAI,CAACiO,YAAY,CAACzF,IAAI,CAAC;YAAEA,IAAI;YAAEC;UAAU,CAAC,CAAC,EAAE,OAAO,MAAM;UAC9E,OAAOqG,IAAI,CAACzF,OAAO,GAAGb,IAAI,EAAEC,SAAS,CAAC;QACxC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACFrI,aAAa,CAAC,IAAI,EAAE,oBAAoB,EAAGqI,SAAS,IAAK;MACvD,MAAMkG,UAAU,GAAG,IAAI,CAACI,aAAa,CAACtG,SAAS,CAAC;MAChD,IAAI,CAACkG,UAAU,EAAE;MACjB,MAAMK,QAAQ,GAAG,IAAI,CAACpB,eAAe,CAACe,UAAU,CAAC;MACjD,IAAIrI,GAAG,GAAG0I,QAAQ,CAACtN,SAAS,CAAEuN,OAAO,IAAK,IAAI,CAACC,QAAQ,CAACzG,SAAS,CAAC,KAAK,IAAI,CAACwF,YAAY,CAACgB,OAAO,CAAC,CAAC;MAClG,OAAO,EAAE3I,GAAG,IAAI,CAAC,EAAE;QACjB,MAAM2I,OAAO,GAAGD,QAAQ,CAAC1I,GAAG,CAAC;QAC7B,IAAI,CAAC,IAAI,CAACuH,eAAe,CAACoB,OAAO,CAAC,EAAE,OAAOA,OAAO;MACpD;MACA;IACF,CAAC,CAAC;IACF7O,aAAa,CAAC,IAAI,EAAE,gBAAgB,EAAGqI,SAAS,IAAK;MACnD,MAAMkG,UAAU,GAAG,IAAI,CAACI,aAAa,CAACtG,SAAS,CAAC;MAChD,IAAI,CAACkG,UAAU,EAAE;MACjB,MAAMK,QAAQ,GAAG,IAAI,CAACpB,eAAe,CAACe,UAAU,CAAC;MACjD,IAAIrI,GAAG,GAAG0I,QAAQ,CAACtN,SAAS,CAAEuN,OAAO,IAAK,IAAI,CAACC,QAAQ,CAACzG,SAAS,CAAC,KAAK,IAAI,CAACwF,YAAY,CAACgB,OAAO,CAAC,CAAC;MAClG,OAAO,EAAE3I,GAAG,GAAG0I,QAAQ,CAACzL,MAAM,EAAE;QAC9B,MAAM0L,OAAO,GAAGD,QAAQ,CAAC1I,GAAG,CAAC;QAC7B,IAAI,CAAC,IAAI,CAACuH,eAAe,CAACoB,OAAO,CAAC,EAAE,OAAOA,OAAO;MACpD;MACA;IACF,CAAC,CAAC;IACF7O,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAGqI,SAAS,IAAK;MACpD,MAAMkG,UAAU,GAAG,IAAI,CAACI,aAAa,CAACtG,SAAS,CAAC;MAChD,OAAOkG,UAAU,GAAG,IAAI,CAACf,eAAe,CAACe,UAAU,CAAC,GAAG,EAAE;IAC3D,CAAC,CAAC;IACFvO,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC+M,QAAQ,GAAG,IAAI,CAACA,QAAQ,KAAK;MAC7D,MAAMxL,MAAM,GAAGiI,OAAO,CAACuD,QAAQ,EAAE;QAC/BzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjC/D,SAAS,EAAGrB,IAAI,IAAK,CAAC,IAAI,CAACyF,YAAY,CAACzF,IAAI,CAAC;MAC/C,CAAC,CAAC;MACF,OAAO7G,MAAM,CAACgD,KAAK,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;IACFvE,aAAa,CAAC,IAAI,EAAE,aAAa,EAAE,CAACqI,SAAS,EAAE0G,KAAK,KAAK;MACvD,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI;MAC9B,OAAO1G,SAAS,CAAClF,MAAM,KAAK4L,KAAK;IACnC,CAAC,CAAC;IACF/O,aAAa,CAAC,IAAI,EAAE,cAAc,EAAGoI,IAAI,IAAK;MAC5C,OAAO,IAAI,CAACoF,eAAe,CAACpF,IAAI,CAAC,CAACjF,MAAM,GAAG,CAAC;IAC9C,CAAC,CAAC;IACFnD,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAE,CAAC+M,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAEW,IAAI,GAAG,CAAC,CAAC,KAAK;MAC9E,IAAInM,MAAM,GAAG,EAAE;MACfyH,KAAK,CAAC+D,QAAQ,EAAE;QACdzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjCvE,OAAO,EAAEA,CAACb,IAAI,EAAEC,SAAS,KAAK;UAC5B,MAAMuF,SAAS,GAAG,IAAI,CAACC,YAAY,CAACzF,IAAI,CAAC;UACzC,IAAIsF,IAAI,CAACI,IAAI,GAAG;YAAElO,KAAK,EAAEgO,SAAS;YAAExF,IAAI;YAAEC;UAAU,CAAC,CAAC,EAAE,OAAO,MAAM;UACrE,IAAI,IAAI,CAACmF,eAAe,CAACpF,IAAI,CAAC,CAACjF,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC6L,WAAW,CAAC3G,SAAS,EAAEqF,IAAI,CAACqB,KAAK,CAAC,EAAE;YACpFxN,MAAM,CAAC4D,IAAI,CAAC,IAAI,CAAC0I,YAAY,CAACzF,IAAI,CAAC,CAAC;UACtC;QACF;MACF,CAAC,CAAC;MACF,OAAO7G,MAAM,CAACgD,KAAK,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;IACFvE,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC+M,QAAQ,GAAG,IAAI,CAACA,QAAQ,KAAK;MAC3D,MAAMpD,KAAK,GAAGH,OAAO,CAACuD,QAAQ,EAAE;QAC9BzE,WAAW,EAAE,IAAI,CAACkF,eAAe;QACjC/D,SAAS,EAAEA,CAACrB,IAAI,EAAEC,SAAS,KAAK;UAC9B,MAAM4C,QAAQ,GAAG,IAAI,CAACuC,eAAe,CAACpF,IAAI,CAAC,CAACnH,GAAG,CAAEiI,KAAK,IAAK,IAAI,CAAC2E,YAAY,CAAC3E,KAAK,CAAC,CAAC;UACpF,OAAO,CACLnK,OAAO,CAAC;YACNsB,KAAK,EAAE,IAAI,CAACgN,aAAa,CAACjF,IAAI,CAAC;YAC/BxI,KAAK,EAAE,IAAI,CAACiO,YAAY,CAACzF,IAAI,CAAC;YAC9BC,SAAS;YACT4C,QAAQ,EAAEA,QAAQ,CAAC9H,MAAM,GAAG,CAAC,GAAG8H,QAAQ,GAAG,KAAK;UAClD,CAAC,CAAC,CACH;QACH;MACF,CAAC,CAAC;MACF,OAAOtB,KAAK,CAACpF,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;IACFvE,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAACoI,IAAI,EAAE6C,QAAQ,KAAK;MACjD,OAAOlM,OAAO,CAAC;QAAE,GAAGqJ,IAAI;QAAE6C;MAAS,CAAC,CAAC;IACvC,CAAC,CAAC;IACFjL,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC+M,QAAQ,EAAE1E,SAAS,EAAEsB,KAAK,KAAK;MAC7D,OAAOoC,OAAO,CAACgB,QAAQ,EAAE;QAAElK,EAAE,EAAEwF,SAAS;QAAEsB,KAAK;QAAErB,WAAW,EAAE,IAAI,CAACkF,eAAe;QAAEtC,MAAM,EAAE,IAAI,CAAC+D;MAAQ,CAAC,CAAC;IAC7G,CAAC,CAAC;IACFjP,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC+M,QAAQ,EAAE1E,SAAS,EAAED,IAAI,KAAK;MAC7D,OAAO6D,OAAO,CAACc,QAAQ,EAAE;QAAElK,EAAE,EAAEwF,SAAS;QAAED,IAAI;QAAEE,WAAW,EAAE,IAAI,CAACkF,eAAe;QAAEtC,MAAM,EAAE,IAAI,CAAC+D;MAAQ,CAAC,CAAC;IAC5G,CAAC,CAAC;IACFjP,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC+M,QAAQ,EAAEvE,UAAU,EAAEvD,EAAE,KAAK;MACzD,OAAOkH,KAAK,CAACY,QAAQ,EAAE;QAAEvE,UAAU;QAAEvD,EAAE;QAAEqD,WAAW,EAAE,IAAI,CAACkF,eAAe;QAAEtC,MAAM,EAAE,IAAI,CAAC+D;MAAQ,CAAC,CAAC;IACrG,CAAC,CAAC;IACFjP,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC+M,QAAQ,EAAEvE,UAAU,KAAK;MACvD,OAAO0D,MAAM,CAACa,QAAQ,EAAE;QAAEvE,UAAU;QAAEF,WAAW,EAAE,IAAI,CAACkF,eAAe;QAAEtC,MAAM,EAAE,IAAI,CAAC+D;MAAQ,CAAC,CAAC;IAClG,CAAC,CAAC;IACFjP,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAACqI,SAAS,EAAED,IAAI,KAAK;MAClD,OAAO,IAAI,CAAC8G,QAAQ,CAAC,IAAI,CAACnC,QAAQ,EAAE1E,SAAS,EAAED,IAAI,CAAC;IACtD,CAAC,CAAC;IACFpI,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAGwI,UAAU,IAAK;MAC5C,OAAO,IAAI,CAAC2G,OAAO,CAAC,IAAI,CAACpC,QAAQ,EAAEvE,UAAU,CAAC;IAChD,CAAC,CAAC;IACFxI,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,CAACqI,SAAS,EAAEsB,KAAK,KAAK;MACxD,MAAM4E,UAAU,GAAG,IAAI,CAACI,aAAa,CAACtG,SAAS,CAAC;MAChD,OAAOkG,UAAU,GAAG,IAAI,CAACa,OAAO,CAAC,IAAI,CAACrC,QAAQ,EAAE1E,SAAS,EAAEsB,KAAK,CAAC,GAAG,KAAK,CAAC;IAC5E,CAAC,CAAC;IACF3J,aAAa,CAAC,IAAI,EAAE,aAAa,EAAE,CAACqI,SAAS,EAAEsB,KAAK,KAAK;MACvD,MAAM4E,UAAU,GAAG,IAAI,CAACI,aAAa,CAACtG,SAAS,CAAC;MAChD,IAAI,CAACkG,UAAU,EAAE;MACjB,MAAMc,UAAU,GAAG,CAAC,GAAGhH,SAAS,CAAC9D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE8D,SAAS,CAACA,SAAS,CAAClF,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;MACnF,OAAO,IAAI,CAACiM,OAAO,CAAC,IAAI,CAACrC,QAAQ,EAAEsC,UAAU,EAAE1F,KAAK,CAAC;IACvD,CAAC,CAAC;IACF3J,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,CAACsP,cAAc,EAAEC,WAAW,KAAK;MAC3D,OAAO,IAAI,CAACC,KAAK,CAAC,IAAI,CAACzC,QAAQ,EAAEuC,cAAc,EAAEC,WAAW,CAAC;IAC/D,CAAC,CAAC;IACFvP,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM;MAClC,OAAO,IAAI,CAACyP,SAAS,CAAC,IAAI,CAAC1C,QAAQ,CAAC;IACtC,CAAC,CAAC;IACF,IAAI,CAACA,QAAQ,GAAGpM,OAAO,CAACoM,QAAQ;EAClC;AACF,CAAC;AACD,SAAS2C,eAAeA,CAAC/F,KAAK,EAAE;EAC9B,IAAIoD,QAAQ,GAAG;IACbnN,KAAK,EAAE;EACT,CAAC;EACD+J,KAAK,CAAC1I,GAAG,CAAEmH,IAAI,IAAK;IAClB,MAAM;MAAEC,SAAS;MAAEhI,KAAK;MAAET;IAAM,CAAC,GAAGwI,IAAI;IACxC,IAAI,CAACC,SAAS,CAAClF,MAAM,EAAE;MACrB5D,MAAM,CAACoQ,MAAM,CAAC5C,QAAQ,EAAE;QAAE1M,KAAK;QAAET,KAAK;QAAEqL,QAAQ,EAAE;MAAG,CAAC,CAAC;MACvD;IACF;IACA8B,QAAQ,GAAGhB,OAAO,CAACgB,QAAQ,EAAE;MAC3BlK,EAAE,EAAEwF,SAAS;MACbsB,KAAK,EAAE,CAAC5K,OAAO,CAAC;QAAEsB,KAAK;QAAET;MAAM,CAAC,CAAC,CAAC;MAClC0I,WAAW,EAAG0C,KAAK,IAAKA,KAAK,CAACC,QAAQ,IAAI,EAAE;MAC5CC,MAAM,EAAEA,CAACF,KAAK,EAAEC,QAAQ,KAAK;QAC3B,OAAOlM,OAAO,CAAC;UAAE,GAAGiM,KAAK;UAAEC;QAAS,CAAC,CAAC;MACxC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO,IAAI6B,cAAc,CAAC;IAAEC;EAAS,CAAC,CAAC;AACzC;AACA,SAAS6C,cAAcA,CAACC,KAAK,EAAE;EAC7B,MAAM9C,QAAQ,GAAG;IACf1M,KAAK,EAAE,EAAE;IACTT,KAAK,EAAE,MAAM;IACbqL,QAAQ,EAAE;EACZ,CAAC;EACD4E,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAK;IACtB,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;IAC7B,IAAIC,WAAW,GAAGnD,QAAQ;IAC1BiD,KAAK,CAACF,OAAO,CAAEK,IAAI,IAAK;MACtB,IAAIC,SAAS,GAAGF,WAAW,CAACjF,QAAQ,EAAEzJ,IAAI,CAAE0H,KAAK,IAAKA,KAAK,CAAC7I,KAAK,KAAK8P,IAAI,CAAC;MAC3E,IAAI,CAACC,SAAS,EAAE;QACdA,SAAS,GAAG;UACVxQ,KAAK,EAAEoQ,KAAK,CAACzL,KAAK,CAAC,CAAC,EAAEyL,KAAK,CAACpO,OAAO,CAACuO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAChO,IAAI,CAAC,GAAG,CAAC;UACxD9B,KAAK,EAAE8P;QACT,CAAC;QACDD,WAAW,CAACjF,QAAQ,KAAKiF,WAAW,CAACjF,QAAQ,GAAG,EAAE,CAAC;QACnDiF,WAAW,CAACjF,QAAQ,CAAC9F,IAAI,CAACiL,SAAS,CAAC;MACtC;MACAF,WAAW,GAAGE,SAAS;IACzB,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO,IAAItD,cAAc,CAAC;IAAEC;EAAS,CAAC,CAAC;AACzC;AACA,IAAIE,SAAS,GAAG;EACdC,WAAWA,CAAC9E,IAAI,EAAE;IAChB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI;IACzC,IAAIhJ,QAAQ,CAACgJ,IAAI,CAAC,IAAI/I,OAAO,CAAC+I,IAAI,EAAE,OAAO,CAAC,EAAE,OAAOA,IAAI,CAACxI,KAAK;IAC/D,OAAO,EAAE;EACX,CAAC;EACD0N,YAAYA,CAAClF,IAAI,EAAE;IACjB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI;IACzC,IAAIhJ,QAAQ,CAACgJ,IAAI,CAAC,IAAI/I,OAAO,CAAC+I,IAAI,EAAE,OAAO,CAAC,EAAE,OAAOA,IAAI,CAAC/H,KAAK;IAC/D,OAAO4M,SAAS,CAACC,WAAW,CAAC9E,IAAI,CAAC;EACpC,CAAC;EACD+E,cAAcA,CAAC/E,IAAI,EAAE;IACnB,IAAIhJ,QAAQ,CAACgJ,IAAI,CAAC,IAAI/I,OAAO,CAAC+I,IAAI,EAAE,UAAU,CAAC,EAAE,OAAO,CAAC,CAACA,IAAI,CAAC7H,QAAQ;IACvE,OAAO,KAAK;EACd,CAAC;EACDyM,cAAcA,CAAC5E,IAAI,EAAE;IACnB,OAAOA,IAAI,CAAC6C,QAAQ;EACtB;AACF,CAAC;AACD,IAAIoF,SAAS,GAAG,MAAMC,UAAU,SAAS1H,GAAG,CAAC;EAC3ClI,WAAWA,CAACa,MAAM,GAAG,EAAE,EAAE;IACvB,KAAK,CAACA,MAAM,CAAC;IACbvB,aAAa,CAAC,IAAI,EAAE,eAAe,EAAE,QAAQ,CAAC;IAC9CA,aAAa,CAAC,IAAI,EAAE,cAAc,EAAE,IAAI,CAAC;IACzCA,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM;MAChC,MAAMuQ,KAAK,GAAG,IAAID,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;MACvC,OAAO,IAAI,CAACE,IAAI,CAACD,KAAK,CAAC;IACzB,CAAC,CAAC;IACFvQ,aAAa,CAAC,IAAI,EAAE,MAAM,EAAGa,KAAK,IAAK;MACrCA,KAAK,CAAC4P,aAAa,GAAG,IAAI,CAACA,aAAa;MACxC5P,KAAK,CAAC6P,YAAY,GAAG,IAAI,CAACA,YAAY;MACtC,OAAO7P,KAAK;IACd,CAAC,CAAC;IACFb,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM;MACnC,OAAO,IAAI,CAAC2C,IAAI,KAAK,CAAC;IACxB,CAAC,CAAC;IACF3C,aAAa,CAAC,IAAI,EAAE,YAAY,EAAGJ,KAAK,IAAK;MAC3C,IAAI,IAAI,CAAC6Q,aAAa,KAAK,MAAM,IAAI7Q,KAAK,IAAI,IAAI,EAAE;QAClD,OAAO,KAAK;MACd;MACA,OAAO,IAAI,CAAC0C,GAAG,CAAC1C,KAAK,CAAC;IACxB,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC2Q,UAAU,EAAE/Q,KAAK,KAAK;MACtD,OAAO,IAAI,CAAC6Q,aAAa,KAAK,MAAM,IAAI,CAACE,UAAU,CAAC/N,eAAe,CAAC+N,UAAU,CAACnP,IAAI,CAAC5B,KAAK,CAAC,CAAC;IAC7F,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,oBAAoB,EAAG2Q,UAAU,IAAK;MACxD,IAAIjL,UAAU,GAAG,IAAI;MACrB,KAAK,IAAI9F,KAAK,IAAI,IAAI,EAAE;QACtB,IAAI,CAAC8F,UAAU,IAAIiL,UAAU,CAACtL,YAAY,CAACzF,KAAK,EAAE8F,UAAU,CAAC,GAAG,CAAC,EAAE;UACjEA,UAAU,GAAG9F,KAAK;QACpB;MACF;MACA,OAAO8F,UAAU;IACnB,CAAC,CAAC;IACF1F,aAAa,CAAC,IAAI,EAAE,mBAAmB,EAAG2Q,UAAU,IAAK;MACvD,IAAI/K,SAAS,GAAG,IAAI;MACpB,KAAK,IAAIhG,KAAK,IAAI,IAAI,EAAE;QACtB,IAAI,CAACgG,SAAS,IAAI+K,UAAU,CAACtL,YAAY,CAACzF,KAAK,EAAEgG,SAAS,CAAC,GAAG,CAAC,EAAE;UAC/DA,SAAS,GAAGhG,KAAK;QACnB;MACF;MACA,OAAOgG,SAAS;IAClB,CAAC,CAAC;IACF5F,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAE,CAAC2Q,UAAU,EAAEC,WAAW,EAAEC,WAAW,KAAK;MAC/E,IAAI,IAAI,CAACJ,aAAa,KAAK,MAAM,EAAE;QACjC,OAAO,IAAI;MACb;MACA,IAAI,IAAI,CAACA,aAAa,KAAK,QAAQ,EAAE;QACnC,OAAO,IAAI,CAACK,gBAAgB,CAACH,UAAU,EAAEE,WAAW,CAAC;MACvD;MACA,MAAME,SAAS,GAAG,IAAI,CAACjQ,IAAI,CAAC,CAAC;MAC7B,MAAMkQ,YAAY,GAAGjQ,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC6L,GAAG,CAAC,CAAC;MAC3C,KAAK,IAAIlN,GAAG,IAAIgR,UAAU,CAACM,aAAa,CAACL,WAAW,EAAEI,YAAY,IAAIH,WAAW,CAAC,EAAE;QAClFE,SAAS,CAACG,MAAM,CAACvR,GAAG,CAAC;MACvB;MACA,KAAK,IAAIA,GAAG,IAAIgR,UAAU,CAACM,aAAa,CAACJ,WAAW,EAAED,WAAW,CAAC,EAAE;QAClE,IAAI,IAAI,CAACO,SAAS,CAACR,UAAU,EAAEhR,GAAG,CAAC,EAAE;UACnCoR,SAAS,CAAClI,GAAG,CAAClJ,GAAG,CAAC;QACpB;MACF;MACA,OAAOoR,SAAS;IAClB,CAAC,CAAC;IACF/Q,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAE,CAAC2Q,UAAU,EAAE/Q,KAAK,KAAK;MAC5D,IAAI,IAAI,CAAC6Q,aAAa,KAAK,MAAM,EAAE;QACjC,OAAO,IAAI;MACb;MACA,IAAI,IAAI,CAACA,aAAa,KAAK,QAAQ,IAAI,CAAC,IAAI,CAACW,UAAU,CAACxR,KAAK,CAAC,EAAE;QAC9D,OAAO,IAAI,CAACkR,gBAAgB,CAACH,UAAU,EAAE/Q,KAAK,CAAC;MACjD;MACA,MAAMmR,SAAS,GAAG,IAAI,CAACjQ,IAAI,CAAC,CAAC;MAC7B,IAAIiQ,SAAS,CAACzO,GAAG,CAAC1C,KAAK,CAAC,EAAE;QACxBmR,SAAS,CAACG,MAAM,CAACtR,KAAK,CAAC;MACzB,CAAC,MAAM,IAAImR,SAAS,CAACI,SAAS,CAACR,UAAU,EAAE/Q,KAAK,CAAC,EAAE;QACjDmR,SAAS,CAAClI,GAAG,CAACjJ,KAAK,CAAC;MACtB;MACA,OAAOmR,SAAS;IAClB,CAAC,CAAC;IACF/Q,aAAa,CAAC,IAAI,EAAE,kBAAkB,EAAE,CAAC2Q,UAAU,EAAE/Q,KAAK,KAAK;MAC7D,IAAI,IAAI,CAAC6Q,aAAa,KAAK,MAAM,EAAE;QACjC,OAAO,IAAI;MACb;MACA,IAAI7Q,KAAK,IAAI,IAAI,EAAE;QACjB,OAAO,IAAI;MACb;MACA,IAAI,CAAC,IAAI,CAACuR,SAAS,CAACR,UAAU,EAAE/Q,KAAK,CAAC,EAAE;QACtC,OAAO,IAAI;MACb;MACA,MAAMmR,SAAS,GAAG,IAAIT,UAAU,CAAC,CAAC1Q,KAAK,CAAC,CAAC;MACzC,OAAO,IAAI,CAAC4Q,IAAI,CAACO,SAAS,CAAC;IAC7B,CAAC,CAAC;IACF/Q,aAAa,CAAC,IAAI,EAAE,cAAc,EAAGuB,MAAM,IAAK;MAC9C,IAAI,IAAI,CAACkP,aAAa,KAAK,MAAM,EAAE;QACjC,OAAO,IAAI;MACb;MACA,IAAIM,SAAS,GAAG,IAAIT,UAAU,CAAC,CAAC;MAChC,KAAK,IAAI1Q,KAAK,IAAI2B,MAAM,EAAE;QACxB,IAAI3B,KAAK,IAAI,IAAI,EAAE;UACjBmR,SAAS,CAAClI,GAAG,CAACjJ,KAAK,CAAC;UACpB,IAAI,IAAI,CAAC6Q,aAAa,KAAK,QAAQ,EAAE;YACnC;UACF;QACF;MACF;MACA,OAAO,IAAI,CAACD,IAAI,CAACO,SAAS,CAAC;IAC7B,CAAC,CAAC;IACF/Q,aAAa,CAAC,IAAI,EAAE,gBAAgB,EAAE,MAAM;MAC1C,MAAM+Q,SAAS,GAAG,IAAI,CAACjQ,IAAI,CAAC,CAAC;MAC7B,IAAIiQ,SAAS,CAACL,YAAY,IAAIK,SAAS,CAACpO,IAAI,GAAG,CAAC,EAAE;QAChDoO,SAAS,CAACM,KAAK,CAAC,CAAC;MACnB;MACA,OAAON,SAAS;IAClB,CAAC,CAAC;IACF/Q,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC2Q,UAAU,EAAE/Q,KAAK,EAAE0R,WAAW,KAAK;MAChE,IAAI,IAAI,CAACb,aAAa,KAAK,MAAM,EAAE;QACjC,OAAO,IAAI;MACb;MACA,IAAI,IAAI,CAACA,aAAa,KAAK,QAAQ,EAAE;QACnC,IAAI,IAAI,CAACW,UAAU,CAACxR,KAAK,CAAC,IAAI,IAAI,CAAC8Q,YAAY,EAAE;UAC/C,OAAO,IAAI,CAACa,eAAe,CAACZ,UAAU,EAAE/Q,KAAK,CAAC;QAChD,CAAC,MAAM;UACL,OAAO,IAAI,CAACkR,gBAAgB,CAACH,UAAU,EAAE/Q,KAAK,CAAC;QACjD;MACF,CAAC,MAAM,IAAI,IAAI,CAAC6Q,aAAa,KAAK,UAAU,IAAIa,WAAW,EAAE;QAC3D,OAAO,IAAI,CAACC,eAAe,CAACZ,UAAU,EAAE/Q,KAAK,CAAC;MAChD,CAAC,MAAM;QACL,OAAO,IAAI,CAACkR,gBAAgB,CAACH,UAAU,EAAE/Q,KAAK,CAAC;MACjD;IACF,CAAC,CAAC;IACFI,aAAa,CAAC,IAAI,EAAE,UAAU,EAAGJ,KAAK,IAAK;MACzC,MAAMmR,SAAS,GAAG,IAAI,CAACjQ,IAAI,CAAC,CAAC;MAC7BiQ,SAAS,CAACG,MAAM,CAACtR,KAAK,CAAC;MACvB,OAAOmR,SAAS;IAClB,CAAC,CAAC;IACF/Q,aAAa,CAAC,IAAI,EAAE,SAAS,EAAGa,KAAK,IAAK;MACxC,OAAO7B,OAAO,CAAC+B,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,EAAED,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAAC;IACrD,CAAC,CAAC;EACJ;AACF,CAAC;AAED,SAAS2F,cAAc,EAAEhG,cAAc,EAAE6P,SAAS,EAAEvD,cAAc,EAAE8C,cAAc,EAAEF,eAAe,EAAExH,gBAAgB,EAAE9B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}