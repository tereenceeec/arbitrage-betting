{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teren\\\\Documents\\\\GitHub\\\\arbitrage-betting\\\\src\\\\components\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchOdds } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [odds, setOdds] = useState([]);\n  useEffect(() => {\n    const getOdds = async () => {\n      try {\n        const data = await fetchOdds();\n        setOdds(data);\n      } catch (error) {\n        console.error('Failed to fetch odds:', error);\n      }\n    };\n    getOdds();\n  }, []);\n\n  // Function to calculate implied probability\n  const calculateImpliedProbability = odds => {\n    return 1 / odds;\n  };\n\n  // Function to check for arbitrage opportunities\n  const checkArbitrage = (homeOdds, awayOdds) => {\n    const homeProb = calculateImpliedProbability(homeOdds);\n    const awayProb = calculateImpliedProbability(awayOdds);\n    return homeProb + awayProb < 1;\n  };\n\n  // Function to find outcomes for a given market (H2H, spreads, totals)\n  const findOutcomes = (markets, marketType, teamName) => {\n    const market = markets.find(m => m.key === marketType);\n    if (market) {\n      return market.outcomes.find(o => o.name === teamName);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NBA Arbitrage Odds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: odds.map((game, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [game.home_team, \" vs \", game.away_team]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: game.bookmakers.map(homeBookmaker => game.bookmakers.map(awayBookmaker => {\n            // Only check arbitrage if bookmakers are different\n            if (homeBookmaker.key !== awayBookmaker.key) {\n              // Find odds for home and away teams from different bookmakers\n              const homeH2H = findOutcomes(homeBookmaker.markets, 'h2h', game.home_team);\n              const awayH2H = findOutcomes(awayBookmaker.markets, 'h2h', game.away_team);\n              const homeSpread = findOutcomes(homeBookmaker.markets, 'spreads', game.home_team);\n              const awaySpread = findOutcomes(awayBookmaker.markets, 'spreads', game.away_team);\n              const homeTotal = findOutcomes(homeBookmaker.markets, 'totals', game.home_team);\n              const awayTotal = findOutcomes(awayBookmaker.markets, 'totals', game.away_team);\n\n              // If both home and away odds exist for H2H, spreads, or totals\n              const outcomes = [{\n                market: 'H2H',\n                home: homeH2H,\n                away: awayH2H\n              }, {\n                market: 'Spreads',\n                home: homeSpread,\n                away: awaySpread\n              }, {\n                market: 'Totals',\n                home: homeTotal,\n                away: awayTotal\n              }];\n\n              // Loop through each market and check for arbitrage opportunities\n              return outcomes.map(({\n                market,\n                home,\n                away\n              }) => {\n                if (home && away) {\n                  const homeOdds = home.price;\n                  const awayOdds = away.price;\n                  if (checkArbitrage(homeOdds, awayOdds)) {\n                    return /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: [homeBookmaker.title, \" (Home) vs \", awayBookmaker.title, \" (Away) - \", market]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 94,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                          children: [game.home_team, \": \", homeOdds]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 96,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                          children: [game.away_team, \": \", awayOdds]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 97,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                            children: \"Arbitrage Opportunity!\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 98,\n                            columnNumber: 37\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 98,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 95,\n                        columnNumber: 31\n                      }, this)]\n                    }, `${homeBookmaker.key}-${awayBookmaker.key}-${market}`, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 93,\n                      columnNumber: 29\n                    }, this);\n                  }\n                }\n                return null;\n              });\n            }\n            return null;\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"F/V+dxJ9GLNnNRYr+i2N0Lf480w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchOdds","jsxDEV","_jsxDEV","App","_s","odds","setOdds","getOdds","data","error","console","calculateImpliedProbability","checkArbitrage","homeOdds","awayOdds","homeProb","awayProb","findOutcomes","markets","marketType","teamName","market","find","m","key","outcomes","o","name","children","fileName","_jsxFileName","lineNumber","columnNumber","map","game","index","home_team","away_team","bookmakers","homeBookmaker","awayBookmaker","homeH2H","awayH2H","homeSpread","awaySpread","homeTotal","awayTotal","home","away","price","title","_c","$RefreshReg$"],"sources":["C:/Users/Teren/Documents/GitHub/arbitrage-betting/src/components/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { fetchOdds } from '../api';\n\nconst App = () => {\n  interface Game {\n    home_team: string;\n    away_team: string;\n    bookmakers: Array<{\n      key: string;\n      title: string;\n      markets: Array<{\n        key: string;\n        outcomes: Array<{\n          name: string;\n          price: number;\n        }>;\n      }>;\n    }>;\n  }\n\n  const [odds, setOdds] = useState<Game[]>([]);\n  \n  useEffect(() => {\n    const getOdds = async () => {\n      try {\n        const data = await fetchOdds();\n        setOdds(data);\n      } catch (error) {\n        console.error('Failed to fetch odds:', error);\n      }\n    };\n\n    getOdds();\n  }, []);\n\n  // Function to calculate implied probability\n  const calculateImpliedProbability = (odds: number) => {\n    return 1 / odds;\n  };\n\n  // Function to check for arbitrage opportunities\n  const checkArbitrage = (homeOdds: number, awayOdds: number) => {\n    const homeProb = calculateImpliedProbability(homeOdds);\n    const awayProb = calculateImpliedProbability(awayOdds);\n    return homeProb + awayProb < 1;\n  };\n\n  // Function to find outcomes for a given market (H2H, spreads, totals)\n  const findOutcomes = (markets: Array<any>, marketType: string, teamName: string) => {\n    const market = markets.find(m => m.key === marketType);\n    if (market) {\n      return market.outcomes.find(o => o.name === teamName);\n    }\n    return null;\n  };\n\n  return (\n    <div>\n      <h1>NBA Arbitrage Odds</h1>\n      <ul>\n        {odds.map((game, index) => (\n          <li key={index}>\n            <h3>\n              {game.home_team} vs {game.away_team}\n            </h3>\n            <ul>\n              {game.bookmakers.map((homeBookmaker) => (\n                game.bookmakers.map((awayBookmaker) => {\n                  // Only check arbitrage if bookmakers are different\n                  if (homeBookmaker.key !== awayBookmaker.key) {\n                    // Find odds for home and away teams from different bookmakers\n                    const homeH2H = findOutcomes(homeBookmaker.markets, 'h2h', game.home_team);\n                    const awayH2H = findOutcomes(awayBookmaker.markets, 'h2h', game.away_team);\n                    const homeSpread = findOutcomes(homeBookmaker.markets, 'spreads', game.home_team);\n                    const awaySpread = findOutcomes(awayBookmaker.markets, 'spreads', game.away_team);\n                    const homeTotal = findOutcomes(homeBookmaker.markets, 'totals', game.home_team);\n                    const awayTotal = findOutcomes(awayBookmaker.markets, 'totals', game.away_team);\n\n                    // If both home and away odds exist for H2H, spreads, or totals\n                    const outcomes = [\n                      { market: 'H2H', home: homeH2H, away: awayH2H },\n                      { market: 'Spreads', home: homeSpread, away: awaySpread },\n                      { market: 'Totals', home: homeTotal, away: awayTotal },\n                    ];\n\n                    // Loop through each market and check for arbitrage opportunities\n                    return outcomes.map(({ market, home, away }) => {\n                      if (home && away) {\n                        const homeOdds = home.price;\n                        const awayOdds = away.price;\n                        if (checkArbitrage(homeOdds, awayOdds)) {\n                          return (\n                            <li key={`${homeBookmaker.key}-${awayBookmaker.key}-${market}`}>\n                              <strong>{homeBookmaker.title} (Home) vs {awayBookmaker.title} (Away) - {market}</strong>\n                              <ul>\n                                <li>{game.home_team}: {homeOdds}</li>\n                                <li>{game.away_team}: {awayOdds}</li>\n                                <li><strong>Arbitrage Opportunity!</strong></li>\n                              </ul>\n                            </li>\n                          );\n                        }\n                      }\n                      return null;\n                    });\n                  }\n                  return null;\n                })\n              ))}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}